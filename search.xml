<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>N + 1 query</title>
    <url>/2020/12/01/N-1-query/</url>
    <content><![CDATA[<p>當我們在rails專案裡面執行關聯性的查詢時，時常會出現N+1 query的狀況，造成效能浪費。舉個例子，在一些網站上我們常可以看到使用者(user)可以針對文章(post)有多個評論(comment)，而我們想在頁面上列出所有comment以及每個comment的user是誰時，就會出現N + 1 query：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">	has_many <span class="symbol">:comments</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#comment model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> &lt; ApplicationRecord</span></span><br><span class="line">	belongs_to <span class="symbol">:user</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#post model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ApplicationRecord</span></span><br><span class="line">	has_many <span class="symbol">:comments</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#posts_controller</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">  <span class="variable">@comment</span> = Comment.new</span><br><span class="line">  <span class="variable">@comments</span> = <span class="variable">@post</span>.comments</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#post的show頁面,列出此post所有comments，並且標示user</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;% <span class="variable">@comments</span>.each <span class="keyword">do</span> <span class="params">|comment|</span> %&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    [&lt;%= comment.user.nickname %&gt;]</span><br><span class="line">		&lt;%= comment.content %&gt;</span><br><span class="line">	&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/ul</span>&gt;</span><br></pre></td></tr></table></figure>
<p>只要每次我們刷新show頁面時，除了撈出所有comments以外，還會針對每一個comment去跑迴圈，到資料庫撈它的user，而所謂的N指的就是這個動作。</p>
<p><img src="/2020/12/01/N-1-query/N+1.png"></p>
<h2 id="使用includes方法解決-eager-loading"><a href="#使用includes方法解決-eager-loading" class="headerlink" title="使用includes方法解決(eager loading)"></a>使用includes方法解決(eager loading)</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#posts_controller</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">  <span class="variable">@comment</span> = Comment.new</span><br><span class="line">  <span class="variable">@comments</span> = <span class="variable">@post</span>.comments.includes(<span class="symbol">:user</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查詢post的所有comment時，把user資料一併關聯進來，就可以先分析並一次把user資料撈出來。</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/12/01/N-1-query/includes.png"></p>
<p>從畫面可以看到從原本的N + 1的查詢，變成1 + 1了，而SQL語法則使用IN()取代原本一筆筆用=去取資料，一次所有相關user資料撈出來。</p>
<p>網路上其實也有人針對rails的N + 1問題做成套件，當發生此問題就會跳出提醒，相關資訊和安裝方式可參考：<a href="https://github.com/flyerhzm/bullet">https://github.com/flyerhzm/bullet</a></p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails學習筆記-Module</title>
    <url>/2020/11/28/Ruby%20on%20Rails%20%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-Module/</url>
    <content><![CDATA[<p>有時有多個類別都需要使用同個方法，這時候可以定義一個模組，讓每個類別可以引入取用。</p>
<h2 id="模組與繼承的不同之處："><a href="#模組與繼承的不同之處：" class="headerlink" title="模組與繼承的不同之處："></a>模組與繼承的不同之處：</h2><ul>
<li>模組沒有繼承的功能：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Flyable</span> &lt; other <span class="title">module</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#無法繼承</span></span><br></pre></td></tr></table></figure>
<ul>
<li>模組不能被實體化：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Flyable</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Dog = Flyable.new </span><br><span class="line"></span><br><span class="line"><span class="comment">#undefined method `new&#x27; for Flyable:Module (NoMethodErro</span></span><br></pre></td></tr></table></figure>
<h2 id="模組引入有兩種寫法："><a href="#模組引入有兩種寫法：" class="headerlink" title="模組引入有兩種寫法："></a>模組引入有兩種寫法：</h2><ol>
<li>在類別內include模組，此類別製造的實體可使用模組的方法（實體方法）</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Invisible</span></span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">woolala</span></span></span><br><span class="line">  puts <span class="string">&quot;nobody can see <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span> now!&quot;</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span></span><br><span class="line">  <span class="keyword">include</span> Invisible</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Phil = Human.new(<span class="string">&quot;Phil&quot;</span>)</span><br><span class="line">Phil.woolala</span><br><span class="line"></span><br><span class="line"><span class="comment">#印出 nobody can see Phil now!</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>  在類別內extend模組，此類別可直接使用方法（類別方法），但其製造的實體不可使用此方法</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Flyable</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fly</span></span></span><br><span class="line">    puts <span class="string">&#x27;I can Fly!&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line">	extend Flyable</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Cat.fly</span><br><span class="line"><span class="comment">#印出 I can Fly!</span></span><br><span class="line"></span><br><span class="line">Phil = Cat.new</span><br><span class="line">Phil.fly</span><br><span class="line"><span class="comment">#undefined method `fly&#x27; for #&lt;Cat:0x0000563c17581b38&gt; (NoMethodError)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="如有重複的類別名稱，可用不同模組區隔，製作實體時，需用”-“來鎖定欲呼叫的類別。"><a href="#如有重複的類別名稱，可用不同模組區隔，製作實體時，需用”-“來鎖定欲呼叫的類別。" class="headerlink" title="如有重複的類別名稱，可用不同模組區隔，製作實體時，需用” :: “來鎖定欲呼叫的類別。"></a>如有重複的類別名稱，可用不同模組區隔，製作實體時，需用” :: “來鎖定欲呼叫的類別。</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">	<span class="class"><span class="keyword">module</span> <span class="title">Z</span></span></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">B</span></span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Ryan = A::Z::Dog.new <span class="comment">#必須一層層呼叫到類別</span></span><br><span class="line">Will = B::Dog.new</span><br></pre></td></tr></table></figure>
<p>冒號的位置在Ruby代表不同意思</p>
<ul>
<li>冒號在左邊，代表符號</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">has_name <span class="symbol">:name</span></span><br></pre></td></tr></table></figure>
<ul>
<li>冒號在右邊，代表hash裡面的key</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123;<span class="symbol">name:</span> <span class="string">&quot;Phil&quot;</span>, <span class="symbol">age:</span> <span class="number">32</span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>冒號在中間，前者是key，後者是符號，中間用空格隔開</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123;<span class="symbol">direction:</span> <span class="symbol">:up</span>, <span class="symbol">power:</span> <span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>冒號在中間，而且沒有空格，代表呼叫模組裡面的類別</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base <span class="comment">#User繼承ActiveRecord模組裡面的Base類別</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Module</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails 學習筆記-Block</title>
    <url>/2020/11/30/Ruby%20on%20Rails%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-Block/</url>
    <content><![CDATA[<h2 id="Block的寫法有哪些？"><a href="#Block的寫法有哪些？" class="headerlink" title="Block的寫法有哪些？"></a>Block的寫法有哪些？</h2><ul>
<li>do..end</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">	puts i</span><br><span class="line"><span class="keyword">end</span>	</span><br></pre></td></tr></table></figure>
<ul>
<li>花括號{ }</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>.times &#123; <span class="params">|i|</span></span><br><span class="line">	puts i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note: block裡面可帶參數進去，例子中是|i|，但這個i只在block裡面作用，類似JS匿名function的參數。</p>
<h2 id="兩種寫法有何不同？"><a href="#兩種寫法有何不同？" class="headerlink" title="兩種寫法有何不同？"></a>兩種寫法有何不同？</h2><p>一般我們遇到比較可以一行搞定的，通常就會選擇花括號，而比較負責的邏輯判斷時，則使用do..end寫法，但這兩種方法還是有一些差異存在，以下舉一個簡單的例子給大家看看。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">p array.map&#123; <span class="params">|a|</span> a * a &#125;</span><br><span class="line"></span><br><span class="line">p array.map <span class="keyword">do</span></span><br><span class="line">  <span class="params">|a|</span> a * a </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ruby常省略小括號，原型其實是：</span><br><span class="line">p(array.map&#123; <span class="params">|a|</span> a * a &#125;) <span class="comment"># 印出 [1, 9, 25, 49]</span></span><br><span class="line"></span><br><span class="line">p(array.map) <span class="keyword">do</span> <span class="comment">#印出 &lt;Enumerator: [1, 3, 5, 7]:map&gt;</span></span><br><span class="line">  <span class="params">|a|</span> a * a </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上面兩種結果顯示do..end這個寫法的結合力較差，在這個例子中的array.map優先跟p結合，而不是後面的block,所以後面的block無法被順利執行。</p>
<h2 id="Block不是物件，無法獨立使用"><a href="#Block不是物件，無法獨立使用" class="headerlink" title="Block不是物件，無法獨立使用"></a>Block不是物件，無法獨立使用</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123; puts <span class="string">&quot;hello&quot;</span> &#125; <span class="comment">#出現語法錯誤</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> puts <span class="string">&quot;hello&quot;</span> <span class="keyword">end</span> <span class="comment">#語法錯誤</span></span><br></pre></td></tr></table></figure>
<h2 id="使用Proc、lambda將block物件化"><a href="#使用Proc、lambda將block物件化" class="headerlink" title="使用Proc、lambda將block物件化"></a>使用Proc、lambda將block物件化</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用Proc</span></span><br><span class="line">	times_five = Proc.new &#123; <span class="params">|x|</span> x * <span class="number">5</span> &#125; <span class="comment">#後面的block變成一個物件，並且可以傳參數進去</span></span><br><span class="line"></span><br><span class="line">p times_five.call(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line">p times_five. === <span class="number">3</span> <span class="comment">#印出15</span></span><br><span class="line">p times_five.(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line">p times_five[<span class="number">3</span>] <span class="comment">#印出15</span></span><br><span class="line">p times_five.<span class="keyword">yield</span>(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用lambda</span></span><br><span class="line">times_five = <span class="built_in">lambda</span> &#123;<span class="params">|x|</span> x * <span class="number">5</span>&#125; <span class="comment">#後面不需要加new方法</span></span><br><span class="line">times_five = -&gt; (x) &#123; x * <span class="number">5</span>&#125; <span class="comment">#lambda的另一種寫法</span></span><br><span class="line"></span><br><span class="line">p times_five.call(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line">p times_five. === <span class="number">3</span> <span class="comment">#印出15</span></span><br><span class="line">p times_five.(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line">p times_five[<span class="number">3</span>] <span class="comment">#印出15</span></span><br><span class="line">p times_five.<span class="keyword">yield</span>(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#兩種方式使用上的不同</span></span><br><span class="line">times_five = Proc.new &#123; <span class="params">|x|</span> x * <span class="number">5</span> &#125; <span class="comment">#執行像是block</span></span><br><span class="line">p times_five.call(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">#正常執行，但只帶第一個引數，印出5。如果絕對值裡面有兩個參數，就可以帶兩個引數進去</span></span><br><span class="line"></span><br><span class="line">times_five = <span class="built_in">lambda</span> &#123;<span class="params">|x|</span> x * <span class="number">5</span>&#125; <span class="comment">#執行像是方法，參數和引數數量必須相同</span></span><br><span class="line">p times_five.call(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">#wrong number of arguments (given 3, expected 1) (引數個數錯誤)</span></span><br></pre></td></tr></table></figure>
<h2 id="Block是如何被執行的？"><a href="#Block是如何被執行的？" class="headerlink" title="Block是如何被執行的？"></a>Block是如何被執行的？</h2><p>可使用yield將控制權交給block執行內容</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span></span><br><span class="line">  puts <span class="string">&quot;hello, phil&quot;</span></span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  puts <span class="string">&quot;let&#x27;s go lakers&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">greeting&#123;</span><br><span class="line">  puts <span class="string">&quot;have you watched NBA final today?&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;2 more wins to go!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#印出</span></span><br><span class="line">hello, phil</span><br><span class="line">have you watched NBA final today?</span><br><span class="line">let<span class="string">&#x27;s go lakers</span></span><br><span class="line"><span class="string">2 more wins to go!</span></span><br></pre></td></tr></table></figure>
<h2 id="應用block概念土炮手動-select"><a href="#應用block概念土炮手動-select" class="headerlink" title="應用block概念土炮手動.select"></a>應用block概念土炮手動.select</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_select</span><span class="params">(list)</span></span></span><br><span class="line">  result = [] <span class="comment">#製作空陣列</span></span><br><span class="line">	  list.each <span class="keyword">do</span> <span class="params">|n|</span> <span class="comment">#將list裡面的每個數字拋進來</span></span><br><span class="line">	   result &lt;&lt; n <span class="keyword">if</span> <span class="keyword">yield</span>(n) <span class="comment">#將數字再給回下面block執行，如果成立，丟到result的陣列裡面</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result <span class="comment">#回傳結果</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p my_select([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) &#123; <span class="params">|i|</span> i.odd? &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#印出[1, 3, 5]</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Block</tag>
      </tags>
  </entry>
  <entry>
    <title>gem-devise-如何在註冊及更新user資料時增加欄位？</title>
    <url>/2020/12/20/gem-devise-%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A8%BB%E5%86%8A%E5%8F%8A%E6%9B%B4%E6%96%B0user%E8%B3%87%E6%96%99%E6%99%82%E5%A6%82%E6%9E%9C%E5%A2%9E%E5%8A%A0%E6%AC%84%E4%BD%8D%EF%BC%9F/</url>
    <content><![CDATA[<p>在使用devise這個gem的時候，雖然它已經幫我們預設做了很多事情，但總是有我們需要客製化的時候，這時候我們可以透過以下步驟來達到目的：</p>
<ol>
<li><p>建立一個 migration，在table新增需要的欄位</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddColumnToUsers</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    add_column <span class="symbol">:users</span>, <span class="symbol">:name</span>, <span class="symbol">:string</span></span><br><span class="line">    add_column <span class="symbol">:users</span>, <span class="symbol">:birthday</span>, <span class="symbol">:datetime</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>rails db:migrate</p>
</li>
<li><p>確認schema.rb裡面已經加入欄位</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">create_table <span class="string">&quot;users&quot;</span>, <span class="symbol">force:</span> <span class="symbol">:cascade</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">    t.string <span class="string">&quot;email&quot;</span>, <span class="symbol">default:</span> <span class="string">&quot;&quot;</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    t.string <span class="string">&quot;encrypted_password&quot;</span>, <span class="symbol">default:</span> <span class="string">&quot;&quot;</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    t.string <span class="string">&quot;reset_password_token&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;reset_password_sent_at&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;remember_created_at&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;created_at&quot;</span>, <span class="symbol">precision:</span> <span class="number">6</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    t.datetime <span class="string">&quot;updated_at&quot;</span>, <span class="symbol">precision:</span> <span class="number">6</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    t.string <span class="string">&quot;name&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;birthday&quot;</span></span><br><span class="line">    t.string <span class="string">&quot;confirmation_token&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;confirmed_at&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;confirmation_sent_at&quot;</span></span><br><span class="line">    t.string <span class="string">&quot;unconfirmed_email&quot;</span></span><br><span class="line">    t.index [<span class="string">&quot;confirmation_token&quot;</span>], <span class="symbol">name:</span> <span class="string">&quot;index_users_on_confirmation_token&quot;</span>, <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">    t.index [<span class="string">&quot;email&quot;</span>], <span class="symbol">name:</span> <span class="string">&quot;index_users_on_email&quot;</span>, <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">    t.index [<span class="string">&quot;reset_password_token&quot;</span>], <span class="symbol">name:</span> <span class="string">&quot;index_users_on_reset_password_token&quot;</span>, <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>參考devise官網的指示，讓新欄位的parameters允許通過<a href="https://github.com/heartcombo/devise#strong-parameters">https://github.com/heartcombo/devise#strong-parameters</a></p>
</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">def configure_permitted_parameters</span><br><span class="line">    devise_parameter_sanitizer.permit(:sign_up, <span class="attr">keys</span>: [:name])</span><br><span class="line">    devise_parameter_sanitizer.permit(:account_update, <span class="attr">keys</span>: [:name])</span><br><span class="line"> end</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>最後回到頁面將新增欄位show出來</li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Gem</tag>
        <tag>Devise</tag>
      </tags>
  </entry>
  <entry>
    <title>gem-devise-如何略過編輯user資料時，必須提供密碼的步驟？</title>
    <url>/2020/12/22/gem-devise-%E5%A6%82%E4%BD%95%E7%95%A5%E9%81%8E%E7%B7%A8%E8%BC%AFuser%E8%B3%87%E6%96%99%E6%99%82%EF%BC%8C%E5%BF%85%E9%A0%88%E6%8F%90%E4%BE%9B%E5%AF%86%E7%A2%BC%E7%9A%84%E6%AD%A5%E9%A9%9F%EF%BC%9F/</url>
    <content><![CDATA[<ol>
<li><p>因為devise預設都是吃Devise controller(如Devise::RegistrationsController)，所以如果要更改設定，必須先建立另一個controller蓋過原始設定。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>rails generate <span class="symbol">devise:</span>controllers [scope]</span><br><span class="line"><span class="comment">#這邊的scope我使用users</span></span><br></pre></td></tr></table></figure>
<p> devise會幫你建立八個controller，如果不想那麼多，可以用以下指令替代</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>rails generate <span class="symbol">devise:</span>controllers users -c=sessions</span><br><span class="line"><span class="comment">#只建立sessions這個controller</span></span><br></pre></td></tr></table></figure></li>
<li><p>到routes.rb這邊放入這段code，告訴router使用我們建立的controller</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">devise_for <span class="symbol">:users</span>, <span class="symbol">controllers:</span> &#123; <span class="symbol">registrations:</span> <span class="string">&#x27;registrations&#x27;</span> &#125;</span><br><span class="line"><span class="comment"># 其他controller如需要也可比照辦理</span></span><br></pre></td></tr></table></figure></li>
<li><p>在registration.controller底下，放入這段code</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_resource</span><span class="params">(resource, params)</span></span></span><br><span class="line">    resource.update_without_password(params)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>在application_controller.rb裡面，放入這段code，讓我們新建的欄位，可以被params抓到並傳送</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure_permitted_parameters</span></span></span><br><span class="line">    devise_parameter_sanitizer.permit(<span class="symbol">:sign_up</span>, <span class="symbol">keys:</span> [<span class="symbol">:name</span>])</span><br><span class="line">    devise_parameter_sanitizer.permit(<span class="symbol">:account_update</span>, <span class="symbol">keys:</span> [<span class="symbol">:name</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>如此一來，就可以在不需要輸入密碼的情況下更改資料。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Gem</tag>
        <tag>Devise</tag>
      </tags>
  </entry>
  <entry>
    <title>動態CRUD回饋商品資料(stimulus js)</title>
    <url>/2021/01/06/%E5%8B%95%E6%85%8BCRUD%E5%9B%9E%E9%A5%8B%E5%95%86%E5%93%81%E8%B3%87%E6%96%99/</url>
    <content><![CDATA[<h3 id="新增、修改並儲存giveback資料"><a href="#新增、修改並儲存giveback資料" class="headerlink" title="新增、修改並儲存giveback資料"></a>新增、修改並儲存giveback資料</h3><p>本篇內容是基於專案進行過程的紀錄，有一些前置內容可參考這篇：<br><a href="https://phillee.cc/2020/12/28/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%80%8Bform%E8%A3%A1%E9%9D%A2%E5%AF%AB%E5%85%A5%E5%85%A9%E5%80%8Bmodel%E7%9A%84%E6%AC%84%E4%BD%8D%EF%BC%9F%E5%A6%82%E4%BD%95%E5%88%AA%E9%99%A4%EF%BC%9F/">如何在一個form裡面寫入兩個model的資料？(nested_form)</a></p>
<ol>
<li><p>為避免畫面太過雜亂，我先將project的_form.html.erb裡面原本的giveback form內容拉出來render</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#views/project/_form.html.erb</span></span><br><span class="line">&lt;%= form.fields_for <span class="symbol">:givebacks</span> <span class="keyword">do</span> <span class="params">|giveback|</span> %&gt;</span><br><span class="line">  &lt;%= render <span class="string">&#x27;giveback_field&#x27;</span>, <span class="symbol">form:</span> giveback %&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#views/project/_giveback_field.html.erb</span></span><br><span class="line">&lt;div class=&#x27;m-3&#x27;&gt;</span><br><span class="line">  &lt;%= form.label <span class="symbol">:title</span>, <span class="string">&#x27;回饋商品&#x27;</span> %&gt;</span><br><span class="line">  &lt;%= form.text_field <span class="symbol">:title</span>, <span class="class"><span class="keyword">class</span>:&#x27;<span class="title">border</span>-2&#x27;%&gt;</span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class=&#x27;m-3&#x27;&gt;</span></span><br><span class="line"><span class="regexp">  &lt;%= form.label :price, &#x27;價格&#x27; %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;%= form.text_field :price, class:&#x27;border-2&#x27; %&gt; </span></span><br><span class="line"><span class="regexp">&lt;/div</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>修改_giveback_field.html.erb，建立一個div把form包起來，新增一個class以便後續js的操作，這邊選擇用content_tag是因為後面還要在裡面寫判斷。</p>
<p> <a href="https://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag">https://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag</a></p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#views/project/_giveback_field.html.erb</span></span><br><span class="line">&lt;%= content_tag <span class="symbol">:div</span>, <span class="class"><span class="keyword">class</span>: &quot;<span class="title">nested_field</span>&quot; <span class="title">do</span> %&gt;</span></span><br><span class="line">  &lt;div class=&#x27;m-3&#x27;&gt;</span><br><span class="line">    &lt;%= form.label <span class="symbol">:title</span>, <span class="string">&#x27;回饋商品&#x27;</span> %&gt;</span><br><span class="line">    &lt;%= form.text_field <span class="symbol">:title</span>, <span class="class"><span class="keyword">class</span>:&#x27;<span class="title">border</span>-2&#x27;%&gt;</span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class=&#x27;m-3&#x27;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%= form.label :price, &#x27;價格&#x27; %&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%= form.text_field :price, class:&#x27;border-2&#x27; %&gt; </span></span><br><span class="line"><span class="regexp">  &lt;/div</span>&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在project的_form.html.erb裡面建立一個template標籤的giveback空表格，之後可以用stimulus js去抓它，塞進頁面裡面達到新增giveback表單的目的。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#views/project/_form.html.erb</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;%= form.fields_for <span class="symbol">:givebacks</span>, Giveback.new, <span class="symbol">child_index:</span> <span class="string">&#x27;new_record&#x27;</span> <span class="keyword">do</span> <span class="params">|giveback|</span> %&gt;</span><br><span class="line">    &lt;%= render <span class="string">&#x27;giveback_field&#x27;</span>, <span class="symbol">form:</span> giveback %&gt;</span><br><span class="line">  &lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>這邊會選用template的標籤，是因為它在網頁載入時不會被渲染，但可以使用js把它實體化。</p>
</li>
<li><p>child_index：讓這個template標籤裡面的資料有不一樣的id跟name來區別它跟其他已產生的giveback form，後面我們會再用js去改變這個值，讓它是獨一無二的，可作為它的id，讓rails知道他是新的資料然後寫進資料庫，而其他的已經存在的物件，我們可以在資料庫找到它，所以只需要更新資料就可以了。<br><a href="https://apidock.com/rails/ActionView/Helpers/FormHelper/fields_for#512-Setting-child-index-while-using-nested-attributes-mass-assignment">Setting child_index while using nested attributes mass assignment</a></p>
<p>  <img src="/2021/01/06/%E5%8B%95%E6%85%8BCRUD%E5%9B%9E%E9%A5%8B%E5%95%86%E5%93%81%E8%B3%87%E6%96%99/1.png"></p>
<p>  <img src="/2021/01/06/%E5%8B%95%E6%85%8BCRUD%E5%9B%9E%E9%A5%8B%E5%95%86%E5%93%81%E8%B3%87%E6%96%99/2.png"></p>
</li>
</ul>
</li>
<li><p>接下來就可以用一個div把這些fields_for的表單包進去，然後加上data-controller，交給stimulus來監管</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#views/project/_form.html.erb</span></span><br><span class="line">&lt;div data-controller=<span class="string">&#x27;nested-form&#x27;</span> &gt;</span><br><span class="line"></span><br><span class="line">  &lt;template data-nested-form-target=<span class="string">&#x27;template&#x27;</span>&gt;</span><br><span class="line">    &lt;%= form.fields_for <span class="symbol">:givebacks</span>, Giveback.new, <span class="symbol">child_index:</span> <span class="string">&#x27;new_record&#x27;</span> <span class="keyword">do</span> <span class="params">|giveback|</span> %&gt;</span><br><span class="line">      &lt;%= render <span class="string">&#x27;giveback_field&#x27;</span>, <span class="symbol">form:</span> giveback %&gt;</span><br><span class="line">    &lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line">  &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;%= form.fields_for :givebacks do |giveback| %&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%= render &#x27;giveback_field&#x27;, form: giveback %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;% end %&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/div</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>設定完controller，接下來就是我們要操控的target，既然要動態新增回饋商品，就需要一個按鈕來做這件事，另外最後再給它一個action，監聽它的點擊事件，然後去找相對應的controller及action。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#views/project/_form.html.erb</span></span><br><span class="line">&lt;div class=&#x27;mb-3&#x27; data-nested-form-target=&#x27;links&#x27;&gt;</span><br><span class="line">  &lt;%= link_to <span class="string">&#x27;新增回饋商品&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="symbol">data:</span> &#123; <span class="symbol">action:</span> <span class="string">&#x27;click-&gt;nested-form#add_new_giveback&#x27;</span> &#125; %&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>接下來我們就正式要開始進入stimulus了，首先在javascript資料夾裡面建立nested_form_controller.js(注意controller名字的慣例, 在html上是寫nested-form)，然後寫下要控制的target</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#javascript/controllers/nested_form_controller.js</span></span><br><span class="line">export default <span class="class"><span class="keyword">class</span> <span class="title">extends</span> <span class="title">Controller</span> &#123;</span></span><br><span class="line">  static targets = [ <span class="string">&quot;links&quot;</span>, <span class="string">&quot;template&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>加上監聽click事件之後執行的方法add_new_giveback，先停止它的預設事件(點擊後跳頁)，接著抓到templateTarget(命名慣例)，把我們之前塞進去的child_index改掉，使用當下的時間替代掉new_record(不一定要取這個名字，可以自己任意命名)，如此一來，每個點擊後加進來的資料的name跟id都不會重複，rails可以以此辨別是否為新的資料。</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">add_new_giveback</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> content = <span class="built_in">this</span>.templateTarget.innerHTML.replace(<span class="regexp">/new_record/g</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img src="/2021/01/06/%E5%8B%95%E6%85%8BCRUD%E5%9B%9E%E9%A5%8B%E5%95%86%E5%93%81%E8%B3%87%E6%96%99/3.png"></p>
<p> <img src="/2021/01/06/%E5%8B%95%E6%85%8BCRUD%E5%9B%9E%E9%A5%8B%E5%95%86%E5%93%81%E8%B3%87%E6%96%99/4.png"></p>
</li>
<li><p>接著把這個新的表單塞到按鈕的上方。</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">add_new_giveback</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> content = <span class="built_in">this</span>.templateTarget.innerHTML.replace(<span class="regexp">/new_record/g</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">this</span>.linksTarget.insertAdjacentHTML(<span class="string">&#x27;beforebegin&#x27;</span>, content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img src="/2021/01/06/%E5%8B%95%E6%85%8BCRUD%E5%9B%9E%E9%A5%8B%E5%95%86%E5%93%81%E8%B3%87%E6%96%99/5.png"></p>
<p> 到這邊已經可以新增、修改並儲存giveback的資料了，接下來就是刪除的部分。</p>
</li>
</ol>
<h3 id="刪除giveback資料"><a href="#刪除giveback資料" class="headerlink" title="刪除giveback資料"></a>刪除giveback資料</h3><p>跟新增修改時一樣，在頁面上的giveback資料有分成已經在資料庫的，以及還未進資料庫的，我們就從後者開始處理。</p>
<ol>
<li><p>首先一樣先寫一個刪除資料的按鈕，然後監聽點擊事件，然後在後面外層的div下判斷，看這些資料是否還沒被儲存，如果是就回傳true。<br><a href="https://apidock.com/rails/ActiveRecord/Base/new_record%3F">https://apidock.com/rails/ActiveRecord/Base/new_record%3F</a></p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;%= content_tag <span class="symbol">:div</span>, <span class="class"><span class="keyword">class</span>: &quot;<span class="title">nested_field</span>&quot;, <span class="title">data</span>: &#123; <span class="title">new_record</span>: <span class="title">form</span>.<span class="title">object</span>.<span class="title">new_record?</span> &#125; <span class="title">do</span> %&gt;</span></span><br><span class="line">  ····（略）····</span><br><span class="line">  &lt;%= link_to <span class="string">&#x27;刪除回饋商品&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="class"><span class="keyword">class</span>:&#x27;<span class="title">mb</span>-3 <span class="title">text</span>-<span class="title">red</span>-400&#x27;, <span class="title">data</span>: &#123; <span class="title">action</span>: &#x27;<span class="title">click</span>-&gt;<span class="title">nested</span>-<span class="title">form</span><span class="comment">#remove_giveback&#x27;&#125;%&gt;</span></span></span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure>
<p> <img src="/2021/01/06/%E5%8B%95%E6%85%8BCRUD%E5%9B%9E%E9%A5%8B%E5%95%86%E5%93%81%E8%B3%87%E6%96%99/6.png"></p>
</li>
<li><p>回到js這邊寫方法，一樣先停止預設行為，然後找到表單最外層的div，如果判斷它還未被寫進資料庫，點擊刪除鍵之後直接整個remove掉。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">remove_giveback(event) &#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line">  </span><br><span class="line">  let wrapper = event.target.closest(<span class="string">&#x27;.nested_field&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (wrapper.dataset.newRecord == <span class="string">&#x27;true&#x27;</span>)&#123;</span><br><span class="line">    wrapper.remove()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>接著處理以及存在的資料，還記得我們在上一篇原本是使用checkbox來對_destoy這個屬性給true或false嗎？如果是true，當我們按下送出表單後，它就會被從資料庫移除，用js寫的概念也一樣，我們先在後面給他一個_destroy的隱藏欄位。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;%= link_to <span class="string">&#x27;刪除回饋商品&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="class"><span class="keyword">class</span>:&#x27;<span class="title">mb</span>-3 <span class="title">text</span>-<span class="title">red</span>-400&#x27;, <span class="title">data</span>: &#123; <span class="title">action</span>: &#x27;<span class="title">click</span>-&gt;<span class="title">nested</span>-<span class="title">form</span><span class="comment">#remove_giveback&#x27;&#125;%&gt;</span></span></span><br><span class="line">&lt;%= form.hidden_field <span class="symbol">:_destroy</span> %&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在js這邊我們先選到那個隱藏欄位並把值改成true，然後先把它隱藏起來，當按下送出資料的按鈕時，才真的把它刪除。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">remove_giveback(event) &#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line">  </span><br><span class="line">  let wrapper = event.target.closest(<span class="string">&#x27;.nested_field&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (wrapper.dataset.newRecord == <span class="string">&#x27;true&#x27;</span>)&#123;</span><br><span class="line">    wrapper.remove()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    wrapper.querySelector(<span class="string">&quot;input[name*=&#x27;_destroy&#x27;]&quot;</span>).value = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    wrapper.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>募資網站project</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在一個form裡面寫入兩個model的資料？(nested_form)</title>
    <url>/2020/12/28/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%80%8Bform%E8%A3%A1%E9%9D%A2%E5%AF%AB%E5%85%A5%E5%85%A9%E5%80%8Bmodel%E7%9A%84%E6%AC%84%E4%BD%8D%EF%BC%9F%E5%A6%82%E4%BD%95%E5%88%AA%E9%99%A4%EF%BC%9F/</url>
    <content><![CDATA[<p>在剛學習rails的時候，表單通常都是單純的一個model填完欄位就送出，直到實際專案在進行時，才遇到需要將兩個model放在同一個form裡面，同時可以儲存資料到個別model的資料庫的需求。這時候就需要用到本篇文章要介紹的主角：Nested form</p>
<p>在我們募資網站的專案例子中，project跟givebacks(回饋商品)是一對多的關係，而我們想在project new頁面的form裡面，同時放入giveback的欄位，可使用fields_for，將兩個model放在同一個form裡面。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#project.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line">  has_many <span class="symbol">:givebacks</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#giveback.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Giveback</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:project</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>按照官方文件的說明，我大概將它分成四個步驟：</p>
<ol>
<li><p>建立一個attribute writer方法到project model裡面</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#project.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line">  has_many <span class="symbol">:givebacks</span></span><br><span class="line">  accepts_nested_attributes_for <span class="symbol">:givebacks</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>用fields_for方法建立nested form（請注意：fields_for後面接的是符號）</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_form.html.erb</span></span><br><span class="line"></span><br><span class="line">&lt;%= form_for(project) <span class="keyword">do</span> <span class="params">|form|</span> %&gt;</span><br><span class="line">  &lt;div class=&quot;project-title&quot;&gt;</span><br><span class="line">    &lt;%= form.label <span class="symbol">:title</span>, <span class="string">&#x27;專案標題&#x27;</span> %&gt;</span><br><span class="line">    &lt;%= form.text_field <span class="symbol">:title%&gt;</span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">	</span></span><br><span class="line"><span class="regexp">	·········（略）···········</span></span><br><span class="line"><span class="regexp">	#下面是giveback的欄位</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%= form.fields_for :givebacks do |givebacks_form| %&gt;</span></span><br><span class="line"><span class="regexp">      &lt;%= givebacks_form.label :回饋商品名稱 %&gt;</span></span><br><span class="line"><span class="regexp">      &lt;%= givebacks_form.text_field :title %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/div</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;%= givebacks_form.label <span class="symbol">:</span>價格 %&gt;</span><br><span class="line">      &lt;%= givebacks_form.text_field <span class="symbol">:price</span> %&gt; </span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;% end %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;%= form.submit %&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>將giveback的資料加到permit</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#projects_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project_params</span></span></span><br><span class="line">    params.<span class="keyword">require</span>(<span class="symbol">:project</span>).permit(<span class="symbol">:id</span>, <span class="symbol">:title</span>, <span class="symbol">:category</span>, <span class="symbol">:summary</span>, <span class="symbol">:content</span>, <span class="symbol">:pic</span>, <span class="symbol">:target_amount</span>, <span class="symbol">:user_id</span>, <span class="symbol">givebacks_attributes:</span> [<span class="symbol">:title</span>, <span class="symbol">:price</span>, <span class="symbol">:deliver_time</span>])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p> 註：id也要被permit過去，否則在update project資料時，giveback因為沒有id的關係，會被判斷成我們要create一個新的，一直製造新的giveback實體。</p>
</li>
<li><p>在project controller的new方法裡面建立givebacks的實體</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#projects_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    <span class="variable">@project</span> = Project.new</span><br><span class="line">    <span class="variable">@project</span>.givebacks.build</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>這時候填完資料按下送出，應該就可以看到兩個model的資料同時寫入資料庫了。</p>
</li>
</ol>
<p><img src="/2020/12/28/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%80%8Bform%E8%A3%A1%E9%9D%A2%E5%AF%AB%E5%85%A5%E5%85%A9%E5%80%8Bmodel%E7%9A%84%E6%AC%84%E4%BD%8D%EF%BC%9F%E5%A6%82%E4%BD%95%E5%88%AA%E9%99%A4%EF%BC%9F/%E6%88%AA%E5%9C%96-2020-12-28.png"></p>
<p>備註：在第四個步驟中，我們只能建立一個giveback的實體，如果需要要建立多個實體及資料，可使用times的方法。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    <span class="variable">@project</span> = Project.new</span><br><span class="line">    <span class="number">5</span>.times &#123;<span class="variable">@project</span>.givebacks.build&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="如何刪除fields-for的資料（後續更新用js來做）"><a href="#如何刪除fields-for的資料（後續更新用js來做）" class="headerlink" title="如何刪除fields_for的資料（後續更新用js來做）"></a>如何刪除fields_for的資料（後續更新用js來做）</h2><ol>
<li><p>在fields_for裡面設定刪除的checkbox選項</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;%= givebacks_form.check_box <span class="symbol">:_destroy</span> %&gt;</span><br><span class="line">  &lt;%= givebacks_form.label <span class="symbol">:_destroy</span>, <span class="string">&#x27;刪除回饋商品&#x27;</span> %&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在project的model裡面設定allow_destroy</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line">  has_many <span class="symbol">:givebacks</span></span><br><span class="line">  accepts_nested_attributes_for <span class="symbol">:givebacks</span>, <span class="symbol">allow_destroy:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>這只是目前我理出的概略步驟，其他詳細說明及用法可參考官方文件：</p>
</li>
</ol>
<p><a href="https://guides.rubyonrails.org/form_helpers.html#building-complex-forms">https://guides.rubyonrails.org/form_helpers.html#building-complex-forms</a></p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>募資網站project</tag>
      </tags>
  </entry>
  <entry>
    <title>常用終端機指令</title>
    <url>/2020/12/04/%E5%B8%B8%E7%94%A8%E7%B5%82%E7%AB%AF%E6%A9%9F%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="進入目錄"><a href="#進入目錄" class="headerlink" title="進入目錄"></a>進入目錄</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cd .   <span class="comment">#目錄原地</span></span><br><span class="line"><span class="variable">$ </span>cd ..  <span class="comment">#回目錄的上一層</span></span><br><span class="line"><span class="variable">$ </span>cd -   <span class="comment">#回上一動作的目錄層</span></span><br><span class="line"><span class="variable">$ </span>pwd    <span class="comment">#確認當前目錄所在層</span></span><br></pre></td></tr></table></figure>
<h2 id="更改檔案權限"><a href="#更改檔案權限" class="headerlink" title="更改檔案權限"></a>更改檔案權限</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod ugo+r file.test <span class="comment"># 幫所有人開讀取權限</span></span><br><span class="line"><span class="variable">$ </span>chmod <span class="number">777</span> file.test <span class="comment"># 幫file.test這個檔案權限全開</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 檔案前面顯示的rwx r-x r-x 分別是檔案擁有者、群組、其他人的權限</span></span><br><span class="line"><span class="comment"># r 表示可讀取，w 表示可寫入，x 表示可執行</span></span><br><span class="line"><span class="comment"># 可使用二進位法 r=4，w=2，x=1</span></span><br><span class="line"><span class="comment"># 若要rwx屬性則4+2+1=7；</span></span><br><span class="line"><span class="comment"># 若要rw-屬性則4+2=6；</span></span><br><span class="line"><span class="comment"># 若要r-x屬性則4+1=7。</span></span><br></pre></td></tr></table></figure>
<h2 id="查看檔案清單"><a href="#查看檔案清單" class="headerlink" title="查看檔案清單"></a>查看檔案清單</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ls -l  <span class="comment">#顯示這個目錄內的物件 </span></span><br><span class="line"><span class="variable">$ </span>ls -al <span class="comment">#顯示這個目錄內包含隱藏檔的物件</span></span><br></pre></td></tr></table></figure>
<h2 id="刪除檔案"><a href="#刪除檔案" class="headerlink" title="刪除檔案"></a>刪除檔案</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>rm  a    <span class="comment"># 移除 a 檔案</span></span><br><span class="line"><span class="variable">$ </span>rm -rf b <span class="comment"># 強制移除b資料夾(慎用)</span></span><br><span class="line">           <span class="comment"># &quot;f&quot;orce = 強制 </span></span><br><span class="line">           <span class="comment"># &quot;r&quot;ecursive = 層遞 </span></span><br><span class="line">           <span class="comment"># 空格代表 and</span></span><br><span class="line"><span class="variable">$ </span>rm file* <span class="comment"># 刪除以 file 開頭為檔名的所有檔案</span></span><br></pre></td></tr></table></figure>
<h2 id="檔案建立-更改"><a href="#檔案建立-更改" class="headerlink" title="檔案建立/更改"></a>檔案建立/更改</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>mv a b               <span class="comment">#將 a 檔名改成 b</span></span><br><span class="line"><span class="variable">$ </span>cp a b               <span class="comment">#將 a 檔複製後命名成 b</span></span><br><span class="line"><span class="variable">$ </span>cat a                <span class="comment">#查 a 檔案內容</span></span><br><span class="line"><span class="variable">$ </span>echo <span class="string">&quot;b&quot;</span> &gt;file.test  <span class="comment">#將 &quot;b&quot; 寫進file.test</span></span><br><span class="line"><span class="variable">$ </span>touch a              <span class="comment">#新增 a 檔案</span></span><br><span class="line"><span class="variable">$ </span>touch abc/def        <span class="comment">#在 abc 底下新增 def 檔案</span></span><br><span class="line"><span class="variable">$ </span>vim a                <span class="comment">#更改 a 檔案內容</span></span><br></pre></td></tr></table></figure>
<h2 id="資料夾建立"><a href="#資料夾建立" class="headerlink" title="資料夾建立"></a>資料夾建立</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>mkdir abc        建立 abc 資料夾</span><br></pre></td></tr></table></figure>
<h2 id="整理終端機頁面"><a href="#整理終端機頁面" class="headerlink" title="整理終端機頁面"></a>整理終端機頁面</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ctrl + w  <span class="comment"># 刪除一段字</span></span><br><span class="line"><span class="variable">$ </span>ctrl + u  <span class="comment"># 整行刪除</span></span><br><span class="line"><span class="variable">$ </span>ctrl + l  <span class="comment"># 清理排面</span></span><br><span class="line"><span class="variable">$ </span>ctrl + r  <span class="comment"># 查詢曾下過的指令</span></span><br><span class="line"><span class="variable">$ </span>cmd + k   <span class="comment"># 全部清除，往上捲也找不到紀錄</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-map.with_index</title>
    <url>/2021/01/02/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7codewar30%E5%A4%A9-day4/</url>
    <content><![CDATA[<h3 id="說明：這次沒有說明，就是按照以下邏輯去完成題目。"><a href="#說明：這次沒有說明，就是按照以下邏輯去完成題目。" class="headerlink" title="說明：這次沒有說明，就是按照以下邏輯去完成題目。"></a>說明：這次沒有說明，就是按照以下邏輯去完成題目。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">accum(&quot;abcd&quot;) -&gt; &quot;A-Bb-Ccc-Dddd&quot;</span><br><span class="line">accum(&quot;RqaEzty&quot;) -&gt; &quot;R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy&quot;</span><br><span class="line">accum(&quot;cwAt&quot;) -&gt; &quot;C-Ww-Aaa-Tttt&quot;</span><br></pre></td></tr></table></figure>
<h3 id="題目："><a href="#題目：" class="headerlink" title="題目："></a>題目：</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Test.describe(<span class="string">&quot;accum&quot;</span>) <span class="keyword">do</span></span><br><span class="line">    Test.it(<span class="string">&quot;Basic tests&quot;</span>) <span class="keyword">do</span></span><br><span class="line">    	  Test.assert_equals(accum(<span class="string">&quot;ZpglnRxqenU&quot;</span>), <span class="string">&quot;Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu&quot;</span>)</span><br><span class="line">        Test.assert_equals(accum(<span class="string">&quot;NyffsGeyylB&quot;</span>), <span class="string">&quot;N-Yy-Fff-Ffff-Sssss-Gggggg-Eeeeeee-Yyyyyyyy-Yyyyyyyyy-Llllllllll-Bbbbbbbbbbb&quot;</span>)</span><br><span class="line">        Test.assert_equals(accum(<span class="string">&quot;MjtkuBovqrU&quot;</span>), <span class="string">&quot;M-Jj-Ttt-Kkkk-Uuuuu-Bbbbbb-Ooooooo-Vvvvvvvv-Qqqqqqqqq-Rrrrrrrrrr-Uuuuuuuuuuu&quot;</span>)</span><br><span class="line">        Test.assert_equals(accum(<span class="string">&quot;EvidjUnokmM&quot;</span>), <span class="string">&quot;E-Vv-Iii-Dddd-Jjjjj-Uuuuuu-Nnnnnnn-Oooooooo-Kkkkkkkkk-Mmmmmmmmmm-Mmmmmmmmmmm&quot;</span>)</span><br><span class="line">        Test.assert_equals(accum(<span class="string">&quot;HbideVbxncC&quot;</span>), <span class="string">&quot;H-Bb-Iii-Dddd-Eeeee-Vvvvvv-Bbbbbbb-Xxxxxxxx-Nnnnnnnnn-Cccccccccc-Ccccccccccc&quot;</span>)</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="解題："><a href="#解題：" class="headerlink" title="解題："></a>解題：</h3><ol>
<li><p>先將題目的字串全部統一換成小寫</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Expected:</span> <span class="string">&quot;Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu&quot;</span>, </span><br><span class="line">instead <span class="symbol">got:</span> <span class="string">&quot;zpglnrxqenu&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>用chars把每個字拆開，同時變成一個陣列</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Expected:</span> <span class="string">&quot;Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu&quot;</span>, </span><br><span class="line">instead <span class="symbol">got:</span> [<span class="string">&quot;z&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;u&quot;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>用map.with_index方法對陣列每一個字元做事情，這邊用with_index可以抓到每個字元的索引值，然後讓他們倍數複製</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Expected:</span> <span class="string">&quot;Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu&quot;</span>, </span><br><span class="line">instead <span class="symbol">got:</span> [<span class="string">&quot;z&quot;</span>, <span class="string">&quot;pp&quot;</span>, <span class="string">&quot;ggg&quot;</span>, <span class="string">&quot;llll&quot;</span>, <span class="string">&quot;nnnnn&quot;</span>, <span class="string">&quot;rrrrrr&quot;</span>, <span class="string">&quot;xxxxxxx&quot;</span>, <span class="string">&quot;qqqqqqqq&quot;</span>, <span class="string">&quot;eeeeeeeee&quot;</span>, <span class="string">&quot;nnnnnnnnnn&quot;</span>, <span class="string">&quot;uuuuuuuuuuu&quot;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>用capitalize讓每個元素的首字大寫</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Expected:</span> <span class="string">&quot;Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu&quot;</span>, </span><br><span class="line">instead <span class="symbol">got:</span> [<span class="string">&quot;Z&quot;</span>, <span class="string">&quot;Pp&quot;</span>, <span class="string">&quot;Ggg&quot;</span>, <span class="string">&quot;Llll&quot;</span>, <span class="string">&quot;Nnnnn&quot;</span>, <span class="string">&quot;Rrrrrr&quot;</span>, <span class="string">&quot;Xxxxxxx&quot;</span>, <span class="string">&quot;Qqqqqqqq&quot;</span>, <span class="string">&quot;Eeeeeeeee&quot;</span>, <span class="string">&quot;Nnnnnnnnnn&quot;</span>, <span class="string">&quot;Uuuuuuuuuuu&quot;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>最後用join(‘-‘)把所有元素用’-‘符號穿在一起變成字串，得到最後結果</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accum</span><span class="params">(s)</span></span></span><br><span class="line">	s.downcase.chars.map.with_index &#123;<span class="params">|x, index|</span> (x * (index + <span class="number">1</span>)).capitalize&#125;.join(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-取小於number的數字中，可以被3以及5整除的數字的總和</title>
    <url>/2021/01/03/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7codewar30%E5%A4%A9-day5/</url>
    <content><![CDATA[<h3 id="題目：取小於number的數字中，可以被3以及5整除的數字的總和，如果是3跟5的公倍數，則只取一次。"><a href="#題目：取小於number的數字中，可以被3以及5整除的數字的總和，如果是3跟5的公倍數，則只取一次。" class="headerlink" title="題目：取小於number的數字中，可以被3以及5整除的數字的總和，如果是3跟5的公倍數，則只取一次。"></a>題目：取小於number的數字中，可以被3以及5整除的數字的總和，如果是3跟5的公倍數，則只取一次。</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(actual, expected)</span></span></span><br><span class="line">  Test.assert_equals(actual, expected)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Test.describe(<span class="string">&quot;example tests&quot;</span>) <span class="keyword">do</span></span><br><span class="line">  test(solution(<span class="number">10</span>), <span class="number">23</span>)</span><br><span class="line">  test(solution(<span class="number">20</span>), <span class="number">78</span>)</span><br><span class="line">  test(solution(<span class="number">200</span>), <span class="number">9168</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="解題方向："><a href="#解題方向：" class="headerlink" title="解題方向："></a>解題方向：</h3><ol>
<li><p>先把1-number的數字抓出來變成一個陣列</p>
<p>(註：後來發現其實可以用1…number只取小於的數字，不包含最大值)</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number)</span></span></span><br><span class="line">  (<span class="number">1</span>..number - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>要對每個元素做選取的動作，所以可以用select，然後取可以整除3或5的數字出來</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number)</span></span></span><br><span class="line">  (<span class="number">1</span>..number - <span class="number">1</span>).select &#123; <span class="params">|x|</span> x % <span class="number">3</span> == <span class="number">0</span> <span class="params">||</span> x % <span class="number">5</span> == <span class="number">0</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>最後再用sum相加得到最後結果</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-將數字從大到小排列</title>
    <url>/2021/01/04/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7codewar30%E5%A4%A9-day6/</url>
    <content><![CDATA[<h3 id="說明：將數字從大到小排列"><a href="#說明：將數字從大到小排列" class="headerlink" title="說明：將數字從大到小排列"></a>說明：將數字從大到小排列</h3><h3 id="題目"><a href="#題目" class="headerlink" title="題目:"></a>題目:</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Test.assert_equals(descending_order(<span class="number">0</span>), <span class="number">0</span>)</span><br><span class="line">Test.assert_equals(descending_order(<span class="number">1</span>), <span class="number">1</span>)</span><br><span class="line">Test.assert_equals(descending_order(<span class="number">123456789</span>), <span class="number">987654321</span>)</span><br></pre></td></tr></table></figure>
<h3 id="初始狀態："><a href="#初始狀態：" class="headerlink" title="初始狀態："></a>初始狀態：</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">descending_order</span><span class="params">(n)</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="解題方向："><a href="#解題方向：" class="headerlink" title="解題方向："></a>解題方向：</h3><ol>
<li><p>因為題目裡面有兩個只有一位數，所以可以先下判斷，如果只有一位數，就回傳那個數字，這樣前兩個題目就過了。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">descending_order</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果要反轉數字的話，可以用digit來做，在不帶任何參數的情況下，可以將其反轉並形成一個陣列，再用sort排序，reverse反轉，後續join轉成字串，最後轉回數字</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">descending_order</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    n.digits.sort.reversejoin.to_i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-找到陣列中只有一個的數字</title>
    <url>/2021/01/05/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7codewar30%E5%A4%A9-day7/</url>
    <content><![CDATA[<h3 id="題目：找到陣列中只有一個的數字"><a href="#題目：找到陣列中只有一個的數字" class="headerlink" title="題目：找到陣列中只有一個的數字"></a>題目：找到陣列中只有一個的數字</h3><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>] ==&gt; <span class="number">2</span></span><br><span class="line">[<span class="number">17</span>, <span class="number">17</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>] ==&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="解題方向："><a href="#解題方向：" class="headerlink" title="解題方向："></a>解題方向：</h3><p>看到要對陣列裡的元素做事情時，都會先想到each, map, select這幾個api，這邊可以用each搭配count去算每個元素的數量，如果等於1代表只有一個，就回傳這個值。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stray</span> <span class="params">(numbers)</span></span></span><br><span class="line">  numbers.each &#123; <span class="params">|x|</span> <span class="keyword">return</span> x <span class="keyword">if</span> numbers.count(x) == <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-取最大值與最小值</title>
    <url>/2020/12/30/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7%E9%A1%8C30%E5%A4%A9-day1/</url>
    <content><![CDATA[<h3 id="題目說明：取最大值與最小值"><a href="#題目說明：取最大值與最小值" class="headerlink" title="題目說明：取最大值與最小值"></a>題目說明：取最大值與最小值</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Test.assert_equals(high_and_low(<span class="string">&quot;4 5 29 54 4 0 -214 542 -64 1 -3 6 -6&quot;</span>), <span class="string">&quot;542 -214&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="起始內容："><a href="#起始內容：" class="headerlink" title="起始內容："></a>起始內容：</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>解題步驟：</p>
<p>1.把字串裡的每個字用split分開，並且得到新的陣列</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line">	numbers.split</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;[<span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;29&quot;</span>, <span class="string">&quot;54&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;-214&quot;</span>, <span class="string">&quot;542&quot;</span>, <span class="string">&quot;-64&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;-3&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;-6&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>2.用map對陣列每個元素做轉換成數字</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line">	numbers.split.map&#123;<span class="params">|x|</span> x.to_i&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;[<span class="number">4</span>, <span class="number">5</span>, <span class="number">29</span>, <span class="number">54</span>, <span class="number">4</span>, <span class="number">0</span>, -<span class="number">214</span>, <span class="number">542</span>, -<span class="number">64</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">6</span>, -<span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<p>3.用minmax取最小及最大值，再reverse把最大值放前面</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line">	numbers.split.map&#123;<span class="params">|x|</span> x.to_i&#125;.minmax.reverse</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;[<span class="number">542</span>, -<span class="number">214</span>]</span><br></pre></td></tr></table></figure>
<p>4.最後join把陣列變回字串，並且在中間加上空格</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line">	numbers.split.map&#123;<span class="params">|x|</span> x.to_i&#125;.minmax.reverse.join(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;<span class="string">&quot;542 -214&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-把陣列裡面中偶數平方、單數做開根號</title>
    <url>/2020/12/31/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7%E9%A1%8C30%E5%A4%A9-day2/</url>
    <content><![CDATA[<h3 id="題目說明：請把陣列裡面中偶數平方、單數做開根號，然後取最後的總和。"><a href="#題目說明：請把陣列裡面中偶數平方、單數做開根號，然後取最後的總和。" class="headerlink" title="題目說明：請把陣列裡面中偶數平方、單數做開根號，然後取最後的總和。"></a>題目說明：請把陣列裡面中偶數平方、單數做開根號，然後取最後的總和。</h3><h3 id="結果："><a href="#結果：" class="headerlink" title="結果："></a>結果：</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Test.assert_equals(sum_square_even_root_odd([<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>]), <span class="number">91.61</span>)</span><br><span class="line"></span><br><span class="line">Test.assert_equals(sum_square_even_root_odd([<span class="number">1</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">17</span>, <span class="number">21</span>]), <span class="number">272.71</span>)</span><br></pre></td></tr></table></figure>
<h3 id="解題說明"><a href="#解題說明" class="headerlink" title="解題說明:"></a>解題說明:</h3><p>用map對陣列內每個元素做判斷，如果是基數，就乘以0.5次方；如果是偶數，就乘以2次方。最後sum加總再用round取小數點兩位</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_square_even_root_odd</span><span class="params">(nums)</span></span></span><br><span class="line"></span><br><span class="line">	nums.map&#123; <span class="params">|x|</span> x.odd? ? x ** <span class="number">0.5</span> : x ** <span class="number">2</span> &#125;.sum.round(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-取字串中間的文字</title>
    <url>/2021/01/01/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7%E9%A1%8C30%E5%A4%A9-day3/</url>
    <content><![CDATA[<h3 id="取一段字串中間的文字"><a href="#取一段字串中間的文字" class="headerlink" title="取一段字串中間的文字"></a>取一段字串中間的文字</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Kata.getMiddle(&quot;test&quot;) should return &quot;es&quot;</span><br><span class="line"></span><br><span class="line">Kata.getMiddle(&quot;testing&quot;) should return &quot;t&quot;</span><br><span class="line"></span><br><span class="line">Kata.getMiddle(&quot;middle&quot;) should return &quot;dd&quot;</span><br><span class="line"></span><br><span class="line">Kata.getMiddle(&quot;A&quot;) should return &quot;A&quot;</span><br></pre></td></tr></table></figure>
<h3 id="解題思考：從題目上看起來，要將每個字串分成單數或偶數，再針對個別去計算要取的index值"><a href="#解題思考：從題目上看起來，要將每個字串分成單數或偶數，再針對個別去計算要取的index值" class="headerlink" title="解題思考：從題目上看起來，要將每個字串分成單數或偶數，再針對個別去計算要取的index值"></a>解題思考：從題目上看起來，要將每個字串分成單數或偶數，再針對個別去計算要取的index值</h3><p>1.如果是單數，就將字串長度除以2再四捨五入，取到中間數</p>
<p>2.如果是偶數，將字串長度除以2再減掉1，加上字串長度除以2</p>
<p>3.雖然方法笨笨的，但有效XD</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_middle</span><span class="params">(s)</span></span></span><br><span class="line">  arr = s.split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> arr.length.odd?</span><br><span class="line">    arr[((arr.length) / <span class="number">2</span>).round]</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    arr[(arr.length) / <span class="number">2</span> - <span class="number">1</span>] + arr[(arr.length) / <span class="number">2</span> ]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>解題完之後看到很聰明的作法，一行就搞定！在這裡也跟大家分享～</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_middle</span><span class="params">(s)</span></span></span><br><span class="line">  s[(s.size-<span class="number">1</span>)/<span class="number">2</span>..s.size/<span class="number">2</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>符號與字串的不同</title>
    <url>/2020/12/03/%E7%AC%A6%E8%99%9F%E8%88%87%E5%AD%97%E4%B8%B2%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
    <content><![CDATA[<h1 id="與String-字串-有何不同？"><a href="#與String-字串-有何不同？" class="headerlink" title="與String(字串)有何不同？"></a>與String(字串)有何不同？</h1><h2 id="1-string的內容可以變，symbol不行"><a href="#1-string的內容可以變，symbol不行" class="headerlink" title="1. string的內容可以變，symbol不行"></a><strong>1. string的內容可以變，symbol不行</strong></h2><p>相似之處在於，他們都可以使用字元方法如.length及.upcase等，也都可以使用中括號 + 索引來取得其中某個字元，但如果想修改symbol的內容，會發生語法錯誤，<em>因為 Symbol 類別並沒有 []= 這個方法。</em></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:lakers</span>.length =&gt; <span class="number">6</span></span><br><span class="line"><span class="symbol">:lakers</span>.capitalize[<span class="number">0</span>] =&gt; <span class="string">&quot;L&quot;</span></span><br><span class="line"><span class="symbol">:lakers</span>[<span class="number">0</span>] = <span class="string">&quot;k&quot;</span></span><br><span class="line">undefined method <span class="string">`[]=&#x27; for :lakers:Symbol</span></span><br></pre></td></tr></table></figure>
<h2 id="2-symbol的提取效率比string好"><a href="#2-symbol的提取效率比string好" class="headerlink" title="2. symbol的提取效率比string好"></a><strong>2. symbol的提取效率比string好</strong></h2><p>上面提到，相同的string對ruby來說是不同物件，而相同的symbol則對應到記憶體中的相同物件。不同symbol 在做比較的時候，是直接比對這兩顆物件的 object_id是否相同，而字串比較則是一個字母一個字母逐一比對。所以在效率上來說，string在做比較的時間複雜度會隨著字母的數量而增加，但 Symbol 因為只比較是不是同一個物件，所以它的複雜度是不變的。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>.times <span class="keyword">do</span> puts <span class="string">&quot;lakers&quot;</span>.object_id</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">=&gt;<span class="number">47397526282660</span></span><br><span class="line"><span class="number">47397526282360</span></span><br><span class="line"><span class="number">47397526285620</span></span><br><span class="line"><span class="number">47397526212580</span></span><br><span class="line"><span class="number">47397526212520</span></span><br><span class="line"><span class="number">5</span>.times <span class="keyword">do</span> puts <span class="symbol">:lakers</span>.object_id</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">=&gt;<span class="number">1031708</span></span><br><span class="line"><span class="number">1031708</span></span><br><span class="line"><span class="number">1031708</span></span><br><span class="line"><span class="number">1031708</span></span><br><span class="line"><span class="number">1031708</span></span><br></pre></td></tr></table></figure>
<h2 id="3-string跟symbol間可以互相轉換"><a href="#3-string跟symbol間可以互相轉換" class="headerlink" title="3. string跟symbol間可以互相轉換"></a><strong>3. string跟symbol間可以互相轉換</strong></h2><ul>
<li>string可透過.to_sym及.intern轉換成symbol。</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;lakers&quot;</span>.to_sym</span><br><span class="line">=&gt; <span class="symbol">:lakers</span></span><br><span class="line"><span class="string">&quot;lakers&quot;</span>.intern</span><br><span class="line">=&gt; <span class="symbol">:lakers</span></span><br></pre></td></tr></table></figure>
<ul>
<li>symbol則可透過.to_s及id2name轉換成string。</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:lakers</span>.to_s</span><br><span class="line">=&gt; <span class="string">&quot;lakers&quot;</span></span><br><span class="line"><span class="symbol">:lakers</span>.id2name</span><br><span class="line">=&gt; <span class="string">&quot;lakers&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-如果把-String-給”冰凍”-freeze-起來，它便不可修改，object-id-也會是同樣的。"><a href="#4-如果把-String-給”冰凍”-freeze-起來，它便不可修改，object-id-也會是同樣的。" class="headerlink" title="4. 如果把 String 給”冰凍”(freeze)起來，它便不可修改，object_id 也會是同樣的。"></a><strong>4. 如果把 String 給”冰凍”(freeze)起來，它便不可修改，object_id 也會是同樣的。</strong></h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>.times <span class="keyword">do</span>   </span><br><span class="line">  puts <span class="string">&quot;hello&quot;</span>.freeze.object_id </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment"># =&gt; 70314415546380 </span></span><br><span class="line"><span class="comment"># =&gt; 70314415546380 </span></span><br><span class="line"><span class="comment"># =&gt; 70314415546380</span></span><br></pre></td></tr></table></figure>
<h1 id="Symbol的使用時機？"><a href="#Symbol的使用時機？" class="headerlink" title="Symbol的使用時機？"></a>Symbol的使用時機？</h1><blockquote>
<p>Strings are used to work with data.<br>Symbols are identifiers.<br>You should use symbols as names or labels for things (like methods) &amp;<br>use strings when you care more about the data (individual characters).</p>
</blockquote>
<p>當我們需要內容是不可變動時，可使用symbol，因為 Symbol具有不可變(immutable)，像標籤一樣的特性，以及它的查找、比較的速度比字串還快，它很適合用來當 Hash 的 Key。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">hash = &#123;<span class="symbol">a:</span> <span class="number">1</span>, <span class="symbol">b:</span> <span class="number">2</span>, <span class="symbol">c:</span> <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>另外有的方法的參數是用字串，有的是用 Symbol，有的是兩種都能用，那該怎麼知道該用哪一種?可參考<a href="https://ruby-doc.org/core-2.7.2/">ruby官方api。</a></p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><p><a href="https://ruby-doc.org/core-2.7.2/">Ruby 2.7.2</a></p>
<p><a href="https://kaochenlong.com/2016/04/25/string-and-symbol/">Ruby 語法放大鏡之「有的變數變前面有一個冒號(例如 :name)，是什麼意思?」 | 高見龍</a></p>
<p><a href="https://www.rubyguides.com/2018/02/ruby-symbols/">What Are Ruby Symbols &amp; How Do They Work? - RubyGuides</a></p>
<p><a href="https://pjchender.github.io/2017/09/26/ruby-symbol%EF%BC%88%E7%AC%A6%E8%99%9F%EF%BC%89/">[Ruby] Symbol（符號）</a></p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Symbol</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-把英文字母轉成它的位置</title>
    <url>/2021/01/06/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7codewar30%E5%A4%A9-day8/</url>
    <content><![CDATA[<h3 id="題目：把英文字母轉成它的位置，忽略所有非英文字母"><a href="#題目：把英文字母轉成它的位置，忽略所有非英文字母" class="headerlink" title="題目：把英文字母轉成它的位置，忽略所有非英文字母"></a>題目：把英文字母轉成它的位置，忽略所有非英文字母</h3><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><p>alphabet_position(“The sunset sets at twelve o’ clock.”)</p>
<p>Should return “20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11” (as a string)</p>
<h3 id="解題方向："><a href="#解題方向：" class="headerlink" title="解題方向："></a>解題方向：</h3><ol>
<li><p>大小寫會影響它的位置號碼，按照它要的結果，應該是用小寫去算，所以先全部換成小寫。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alphabet_position</span><span class="params">(text)</span></span></span><br><span class="line">  text.downcase</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>把所有非英文字母，包含空白字元全部用gsub取代。</p>
<p> 這邊有參考stackoverflow關於如何使用正規表示法去刪除非字元：</p>
<p> <a href="https://stackoverflow.com/questions/5424354/regex-to-remove-non-letters">https://stackoverflow.com/questions/5424354/regex-to-remove-non-letters</a></p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alphabet_position</span><span class="params">(text)</span></span></span><br><span class="line">  text.downcase.gsub(<span class="regexp">/[^a-zA-Z]/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt; <span class="string">&quot;thesunsetsetsattwelveoclock&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>用bytes轉換成它的位置，但同時也會轉變成陣列</p>
<p> <a href="https://ruby-doc.org/core-2.5.1/String.html#method-i-bytes">https://ruby-doc.org/core-2.5.1/String.html#method-i-bytes</a></p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alphabet_position</span><span class="params">(text)</span></span></span><br><span class="line">  text.downcase.gsub(<span class="regexp">/[^a-zA-Z]/</span>, <span class="string">&#x27;&#x27;</span>).bytes</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;[<span class="number">116</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">115</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">107</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>個別減96計算出正確位置</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alphabet_position</span><span class="params">(text)</span></span></span><br><span class="line">  text.downcase.gsub(<span class="regexp">/[^a-zA-Z]/</span>, <span class="string">&#x27;&#x27;</span>).bytes.map&#123; <span class="params">|i|</span> i - <span class="number">96</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt; [<span class="number">20</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>最後再轉回字串並且加上空格完成題目</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alphabet_position</span><span class="params">(text)</span></span></span><br><span class="line">  text.downcase.gsub(<span class="regexp">/[^a-zA-Z]/</span>, <span class="string">&#x27;&#x27;</span>).bytes.map&#123; <span class="params">|i|</span> i - <span class="number">96</span> &#125;.join(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt; <span class="string">&quot;20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-將駝峰式名稱拆開</title>
    <url>/2021/01/08/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7codewar30%E5%A4%A9-day10/</url>
    <content><![CDATA[<h3 id="題目：將駝峰式名稱拆開（好難翻啊…還是直接看範例吧！）"><a href="#題目：將駝峰式名稱拆開（好難翻啊…還是直接看範例吧！）" class="headerlink" title="題目：將駝峰式名稱拆開（好難翻啊…還是直接看範例吧！）"></a>題目：將駝峰式名稱拆開（好難翻啊…還是直接看範例吧！）</h3><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Test.assert_equals(solution(<span class="string">&#x27;camelCasing&#x27;</span>), <span class="string">&#x27;camel Casing&#x27;</span>)</span><br><span class="line">Test.assert_equals(solution(<span class="string">&#x27;camelCasingTest&#x27;</span>), <span class="string">&#x27;camel Casing Test&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="解題方向："><a href="#解題方向：" class="headerlink" title="解題方向："></a>解題方向：</h3><ol>
<li><p>想到要拆字串，心中有幾個常用的方法浮現，chars會將它拆成個別字元，所以不是我要的，而split或許是個選項，接下來的問題就是如何找到大寫字母來做拆解條件？或許可以用常規標示法來做，於是就來直接餵狗(google)啦！我下的關鍵字是”split capital case ruby”，很幸運的在第一頁就找到解法@@<br><a href="https://stackoverflow.com/questions/3997516/how-to-split-a-camelcase-string-in-its-substrings-in-ruby">https://stackoverflow.com/questions/3997516/how-to-split-a-camelcase-string-in-its-substrings-in-ruby</a></p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(string)</span></span></span><br><span class="line">  string.split(<span class="regexp">/(?=[A-Z])/</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;<span class="symbol">Expected:</span> <span class="string">&quot;camel Casing&quot;</span>, instead <span class="symbol">got:</span> [<span class="string">&quot;camel&quot;</span>, <span class="string">&quot;Casing&quot;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>第一步完成將駝峰拆掉了，接下來是如何組回去字串，並且在中間加上空格。刷過幾次codewar之後，對陣列轉字串應該就不陌生了，join是大家的好朋友～我就用它來結束這一回合吧！</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(string)</span></span></span><br><span class="line">  string.split(<span class="regexp">/(?=[A-Z])/</span>).join(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-找到中間值的index</title>
    <url>/2021/01/09/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7codewar30%E5%A4%A9-day11/</url>
    <content><![CDATA[<h3 id="題目：找到中間值的index"><a href="#題目：找到中間值的index" class="headerlink" title="題目：找到中間值的index"></a>題目：找到中間值的index</h3><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Test.describe(<span class="string">&quot;Basic Tests&quot;</span>) <span class="keyword">do</span></span><br><span class="line">Test.assert_equals(gimme([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]), <span class="number">0</span>, <span class="string">&#x27;Finds the index of middle element&#x27;</span>)</span><br><span class="line">Test.assert_equals(gimme([<span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>]), <span class="number">1</span>, <span class="string">&#x27;Finds the index of middle element&#x27;</span>)</span><br><span class="line">Test.assert_equals(gimme([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]), <span class="number">1</span>, <span class="string">&#x27;Finds the index of middle element&#x27;</span>)</span><br><span class="line">Test.assert_equals(gimme([<span class="number">15</span>, <span class="number">10</span>, <span class="number">14</span>]), <span class="number">2</span>, <span class="string">&#x27;Finds the index of middle element&#x27;</span>)</span><br><span class="line">Test.assert_equals(gimme([-<span class="number">0.410</span>, -<span class="number">23</span>, <span class="number">4</span>]), <span class="number">0</span>, <span class="string">&#x27;Finds the index of middle element(Negative numbers)&#x27;</span>)</span><br><span class="line">Test.assert_equals(gimme([-<span class="number">15</span>, -<span class="number">10</span>, <span class="number">14</span>]), <span class="number">1</span>, <span class="string">&#x27;Finds the index of middle element (Negative numbers)&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="解題方向："><a href="#解題方向：" class="headerlink" title="解題方向："></a>解題方向：</h3><ol>
<li><p>我們必須先找到哪個數字是中間值，所以把這個陣列按照順序排列，因為題目都是只有三個元素，所以我就取第二個，然後給他一個變數以便後面取用。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gimme</span><span class="params">(arr)</span></span></span><br><span class="line">  middle_element = (arr.sort)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line">Finds the index of middle element -  <span class="symbol">Expected:</span> <span class="number">0</span>, instead <span class="symbol">got:</span> <span class="number">2</span></span><br><span class="line">Finds the index of middle element -  <span class="symbol">Expected:</span> <span class="number">1</span>, instead <span class="symbol">got:</span> <span class="number">10</span></span><br><span class="line">Finds the index of middle element -  <span class="symbol">Expected:</span> <span class="number">1</span>, instead <span class="symbol">got:</span> <span class="number">3</span></span><br><span class="line">Finds the index of middle element -  <span class="symbol">Expected:</span> <span class="number">2</span>, instead <span class="symbol">got:</span> <span class="number">14</span></span><br><span class="line">Finds the index of middle element(Negative numbers) -  <span class="symbol">Expected:</span> <span class="number">0</span>, instead <span class="symbol">got:</span> -<span class="number">0.41</span></span><br><span class="line">Finds the index of middle element (Negative numbers) -  <span class="symbol">Expected:</span> <span class="number">1</span>, instead <span class="symbol">got:</span> -<span class="number">10</span></span><br></pre></td></tr></table></figure></li>
<li><p>接下來就是要找到這個值在原本的陣列中的位置</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gimme</span><span class="params">(arr)</span></span></span><br><span class="line">  middle_element = (arr.sort)[<span class="number">1</span>]</span><br><span class="line">  arr.index(middle_element)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>codewar-判斷數字是否為平方</title>
    <url>/2021/01/07/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7codewar30%E5%A4%A9-day9/</url>
    <content><![CDATA[<h3 id="題目：判斷數字是否為平方"><a href="#題目：判斷數字是否為平方" class="headerlink" title="題目：判斷數字是否為平方"></a>題目：判斷數字是否為平方</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">describe <span class="string">&quot;is_square&quot;</span> <span class="keyword">do</span></span><br><span class="line">  it <span class="string">&quot;should work for some examples&quot;</span> <span class="keyword">do</span></span><br><span class="line">    Test.assert_equals (is_square (-<span class="number">1</span>)), <span class="literal">false</span>, <span class="string">&quot;-1 is not a perfect square&quot;</span></span><br><span class="line">    Test.assert_equals (is_square  <span class="number">0</span>),   <span class="literal">true</span>,  <span class="string">&quot;0 is a perfect square (0 * 0)&quot;</span></span><br><span class="line">    Test.assert_equals (is_square  <span class="number">3</span>),   <span class="literal">false</span>,  <span class="string">&quot;3 is not a perfect square&quot;</span></span><br><span class="line">    Test.assert_equals (is_square  <span class="number">4</span>),    <span class="literal">true</span>,   <span class="string">&quot;4 is a perfect square (2 * 2)&quot;</span></span><br><span class="line">    Test.assert_equals (is_square <span class="number">25</span>),    <span class="literal">true</span>,  <span class="string">&quot;25 is a perfect square (5 * 5)&quot;</span></span><br><span class="line">    Test.assert_equals (is_square <span class="number">26</span>),   <span class="literal">false</span>, <span class="string">&quot;26 is not a perfect square&quot;</span></span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="解題方向："><a href="#解題方向：" class="headerlink" title="解題方向："></a>解題方向：</h3><p>先排除掉負值，如果是平方，開根號會是整數，所以除以1會等於0，反之則否。所以直接將參數開根號去除以1去餘數0.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_square</span><span class="params">(x)</span></span></span><br><span class="line">  <span class="comment">#x等於0，或開根號後得到整數</span></span><br><span class="line">  x &gt;= <span class="number">0</span> &amp;&amp; Math.sqrt(x) % <span class="number">1</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
  <entry>
    <title>留言及回覆功能-self-join</title>
    <url>/2021/01/22/%E7%95%99%E8%A8%80%E5%8F%8A%E5%9B%9E%E8%A6%86%E5%8A%9F%E8%83%BD-self-join/</url>
    <content><![CDATA[<p>在設計model的時候，會發現有時候model需要跟自己有關連，這次要紀錄的留言及回覆功能就是一個很好的例子，回覆基本上也是留言的一種，我們可以運用self-join這個方法，建立它們之間的關聯。</p>
<p>註：以下範例是基於募資網站的題目，功能設計是需要在募資專案的show頁面當中，user可以留言而提案者可以針對每則留言個別回覆，以下我就針對實作的內容分成conmment跟reply兩個部分跟大家分享。</p>
<h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><ol>
<li><p>建立comment model，parent_id是為了comment和reply之間的關聯設定(別忘了rails db:migrate)</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rails g model Comment <span class="symbol">user:</span>references <span class="symbol">project:</span>references <span class="symbol">parent_id:</span>integer <span class="symbol">content:</span>text</span><br></pre></td></tr></table></figure></li>
<li><p>回到project和user設定has many comment，另外也限定留言不得空白</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/models/project.rb</span></span><br><span class="line">has_many <span class="symbol">:comments</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/models/user.rb</span></span><br><span class="line">has_many <span class="symbol">:comments</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/models/comments.rb</span></span><br><span class="line">belongs_to <span class="symbol">:project</span></span><br><span class="line">belongs_to <span class="symbol">:user</span></span><br><span class="line">validates <span class="symbol">:content</span>, presence <span class="symbol">:true</span></span><br></pre></td></tr></table></figure></li>
<li><p>設定comment的路徑</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">resources <span class="symbol">:projects</span>, <span class="symbol">shallow:</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:comments</span>, <span class="symbol">shallow:</span> <span class="literal">true</span>, <span class="symbol">only:</span> [<span class="symbol">:new</span>, <span class="symbol">:create</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p> 這邊我只需要三個路徑，並且destroy只需要comment的id就可以抓到它進行刪除，所以使用shallow: true可以遮蔽掉前面的project，避免太冗長的網址 (完整說明可以參考官方文件<a href="https://guides.rubyonrails.org/routing.html#shallow-nesting">https://guides.rubyonrails.org/routing.html#shallow-nesting</a>）</p>
</li>
<li><p>在project的show頁面放入comment的form</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># view/projects/show.html.erb</span></span><br><span class="line">&lt;% <span class="keyword">if</span> user_signed_in? %&gt;</span><br><span class="line">  &lt;%= form_with <span class="symbol">model:</span> Comment.new, <span class="symbol">url:</span> project_comments_path(<span class="variable">@project</span>) <span class="keyword">do</span> <span class="params">|f|</span> %&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;%= f.text_area <span class="symbol">:content</span>, <span class="symbol">placeholder:</span> <span class="string">&#x27;請留言&#x27;</span> %&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%= f.submit &#x27;送出&#x27; %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;% end %&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>建立comment的controller，然後新增一個create的方法</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/controllers/comments_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">	<span class="variable">@project</span> = Project.find(params[<span class="symbol">:project_id</span>])</span><br><span class="line">  <span class="variable">@comment</span> = current_user.comments.new(comment_params)</span><br><span class="line">  <span class="variable">@comment</span>.project = @project</span><br><span class="line">   <span class="keyword">if</span> <span class="variable">@comment</span>.save</span><br><span class="line">     redirect_to project_path(<span class="variable">@project</span>)</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">private</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment_params</span></span></span><br><span class="line">  params.<span class="keyword">require</span>(<span class="symbol">:comment</span>).permit(<span class="symbol">:content</span>, <span class="symbol">:parent_id</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p> <img src="/2021/01/22/%E7%95%99%E8%A8%80%E5%8F%8A%E5%9B%9E%E8%A6%86%E5%8A%9F%E8%83%BD-self-join/11.png"></p>
<p> 這時候如果我們在頁面上新增留言就可以順利create，但除非我們去看log紀錄，否則在畫面上還看不出來，因為我們根本還沒把它渲染出來。</p>
</li>
<li><p>在project的show頁面把comment渲染出來。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;%= render <span class="variable">@project</span>.comments, <span class="symbol">comment:</span> <span class="variable">@comment</span> %&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#views/comments/_comment.html.erb</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  [&lt;%= comment.user.name %&gt;]</span><br><span class="line">  &lt;%= comment.created_at.strftime(<span class="string">&quot;%Y/%m/%d&quot;</span>) %&gt;</span><br><span class="line">  &lt;%= comment.content %&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
<p> 如果覺得comment建立時間的預設格式太冗長，可以用strftime改成自己喜歡的格式。<a href="https://apidock.com/ruby/DateTime/strftime">https://apidock.com/ruby/DateTime/strftime</a></p>
</li>
</ol>
<h3 id="Reply"><a href="#Reply" class="headerlink" title="Reply"></a>Reply</h3><p>我們並不會建立reply的model，而是透過self-join的方法利用我們一開始在comment的model裡面建立的parent_id欄位來關聯他們，基本上reply就是comment。</p>
<p><a href="https://guides.rubyonrails.org/association_basics.html#self-joins">https://guides.rubyonrails.org/association_basics.html#self-joins</a></p>
<ol>
<li><p>首先我們先把comment跟reply的關係設定好</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:project</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line">  has_many <span class="symbol">:replies</span>, <span class="symbol">class_name:</span> <span class="string">&#x27;Comment&#x27;</span>, <span class="symbol">foreign_key:</span> <span class="symbol">:parent_id</span>, <span class="symbol">dependent:</span> <span class="symbol">:destroy</span></span><br><span class="line"></span><br><span class="line">  validates <span class="symbol">:content</span>, <span class="symbol">presence:</span> <span class="symbol">:true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>接下來就讓我們來建立reply的form吧，如果comment有任何reply就把它們印出來。這邊使用remote:true代表我們要用ajax來執行非同步處理。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#views/comments/_comment.html.erb</span></span><br><span class="line">&lt;%= link_to <span class="string">&#x27;回覆&#x27;</span>, new_project_comment_path(<span class="variable">@project</span>, <span class="symbol">parent_id:</span> comment.id), <span class="symbol">remote:</span> <span class="literal">true</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> comment.replies.any? %&gt;</span><br><span class="line">  &lt;% comment.replies.each <span class="keyword">do</span> <span class="params">|reply|</span> %&gt; </span><br><span class="line">    &lt;%= render <span class="string">&#x27;comments/reply&#x27;</span>, <span class="symbol">reply:</span> reply %&gt;</span><br><span class="line">  &lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>建立_reply頁面</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/comments/_reply.html.erb</span></span><br><span class="line">&lt;div  class=&#x27;ml-5&#x27;&gt;</span><br><span class="line">  [&lt;%= reply.user.name %&gt;]</span><br><span class="line">  &lt;%= reply.created_at.strftime(<span class="string">&quot;%Y/%m/%d&quot;</span>) %&gt;</span><br><span class="line">  &lt;%= reply.content %&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>建立reply的form，這邊也放了一個parent_id的隱藏欄位，透過comment的new action來把它填入表單</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;%= form_with <span class="symbol">model:</span> [<span class="variable">@project</span>, <span class="variable">@comment</span>] <span class="keyword">do</span> <span class="params">|f|</span> %&gt;</span><br><span class="line">  &lt;%= f.hidden_field <span class="symbol">:parent_id</span> %&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;%= f.text_area <span class="symbol">:content</span>, <span class="symbol">placeholder:</span> <span class="string">&#x27;請回覆&#x27;</span>, <span class="class"><span class="keyword">class</span>:&#x27;<span class="title">border</span>-2&#x27; %&gt;</span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;%= f.submit &#x27;送出回覆&#x27; %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;%= link_to &#x27;取消&#x27;, project_path(@project) %&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>生成一個new方法，填入parent_id到隱藏欄位裡面</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#comments_controller.eb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">	<span class="variable">@project</span> = Project.find(params[<span class="symbol">:project_id</span>])</span><br><span class="line">  <span class="variable">@comment</span> = current_user.comments.new(<span class="symbol">parent_id:</span> params[<span class="symbol">:parent_id</span>])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li><p>接下來我們要使用ajax方式生成回覆的資料，先建一個空的div容器，待會塞資料給它。這邊的動態id是為了後續能用JS抓到指定的那一個form。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#app/views/_comment.html.erb</span></span><br><span class="line">&lt;div id=<span class="string">&quot;reply-form-&lt;%= comment.id %&gt;&quot;</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>新建一個new.js.erb的檔案，當點擊新增回覆的按鈕時會找到它，把reply_form的資料渲染在這個位置。<br>(j的用法:<a href="https://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript">https://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript</a>)</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#comments/new.js.erb</span></span><br><span class="line">document.querySelector(<span class="string">&quot;#reply-form-&lt;%= @comment.parent_id %&gt;&quot;</span>).innerHTML = (<span class="string">&quot;&lt;%= j render &#x27;reply_form&#x27;, comment: @comment %&gt;&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>最後填完回覆內容按下送出，就可以把這筆資料存進資料庫了。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>募資網站project</tag>
      </tags>
  </entry>
  <entry>
    <title>將Action_text編輯器的圖檔上傳到_AWS_S3</title>
    <url>/2021/01/29/%E4%BD%BF%E7%94%A8Action-text%E7%B7%A8%E8%BC%AF%E5%99%A8%E4%B8%8A%E5%82%B3%E5%9C%96%E6%AA%94%E5%88%B0-AWS-S3/</url>
    <content><![CDATA[<p>Action text 是rails 6之後新增加的編輯器功能，它整合了trix編輯器的內嵌圖片、comment、quote等功能，非常容易安裝使用，以下跟大家分享我的安裝及上傳內嵌圖片到s3的經驗。</p>
<h2 id="安裝action-text-及active-storage"><a href="#安裝action-text-及active-storage" class="headerlink" title="安裝action text 及active storage"></a>安裝action text 及active storage</h2><ol>
<li><p>首先按照rails官網指示安裝<a href="https://guides.rubyonrails.org/action_text_overview.html">action text</a></p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rails <span class="symbol">action_text:</span>install</span><br></pre></td></tr></table></figure></li>
<li><p>在application.js引入trix跟action text</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">&quot;trix&quot;</span>)</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;@rails/actiontext&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>因為action text需搭配<a href="https://guides.rubyonrails.org/active_storage_overview.html">active storage</a>來夾帶附件及圖片，所以一併安裝，輸入以下指令會建立兩個table(active_storage_blobs and active_storage_attachments)。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rails <span class="symbol">active_storage:</span>install</span><br><span class="line">rails <span class="symbol">db:</span>migrate</span><br></pre></td></tr></table></figure></li>
<li><p>在安裝action text的同時，也同時新增了一個actiontext.scss，可以針對編輯器的css做更改，記得把它打包到stylesheet的pack裡面。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">@import</span> <span class="string">&quot;./actiontext.scss&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="開始使用action-text"><a href="#開始使用action-text" class="headerlink" title="開始使用action text"></a>開始使用action text</h2></li>
<li><p>在你要使用編輯器的model及欄位做設定。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#project.rb</span></span><br><span class="line">has_rich_text <span class="symbol">:content</span></span><br></pre></td></tr></table></figure></li>
<li><p>在view上把編輯器渲染出來。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;%= form.rich_text_area <span class="symbol">:content</span> %&gt;</span><br></pre></td></tr></table></figure>
<p> <img src="/2021/01/29/%E4%BD%BF%E7%94%A8Action-text%E7%B7%A8%E8%BC%AF%E5%99%A8%E4%B8%8A%E5%82%B3%E5%9C%96%E6%AA%94%E5%88%B0-AWS-S3/1.png"></p>
</li>
<li><p>如果是在development階段開發，active storage預設會走local的儲存方式(可見development的設定)，附件都會存在本機，所以現在已經可以開始進行編輯及內嵌圖片囉！</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#development.rb</span></span><br><span class="line">config.active_storage.service = <span class="symbol">:local</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#storage.yml</span></span><br><span class="line"><span class="symbol">test:</span></span><br><span class="line">  <span class="symbol">service:</span> Disk</span><br><span class="line">  <span class="symbol">root:</span> &lt;%= Rails.root.join(<span class="string">&quot;tmp/storage&quot;</span>) %&gt;</span><br><span class="line"></span><br><span class="line"><span class="symbol">local:</span></span><br><span class="line">  <span class="symbol">service:</span> Disk</span><br><span class="line">  <span class="symbol">root:</span> &lt;%= Rails.root.join(<span class="string">&quot;storage&quot;</span>) %&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>預設的編輯器在上傳圖片時，會有一組caption，如果不需要的話，可以在_blob.html裡面把它拿掉。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;figure class=&quot;attachment attachment--&lt;%= blob.representable? ? &quot;preview&quot; : &quot;file&quot; %&gt; attachment--&lt;%= blob.filename.extension %&gt;&quot;&gt;</span><br><span class="line">  &lt;% <span class="keyword">if</span> blob.representable? %&gt;</span><br><span class="line">    &lt;%= image_tag blob.representation(<span class="symbol">resize_to_limit:</span> local_assigns[<span class="symbol">:in_gallery</span>] ? [ <span class="number">800</span>, <span class="number">600</span> ] : [ <span class="number">1024</span>, <span class="number">768</span> ]) %&gt;</span><br><span class="line">  &lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line"></span><br><span class="line">	&lt;figcaption class=&quot;attachment__caption&quot;&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> caption = blob.try(<span class="symbol">:caption</span>) %&gt;</span><br><span class="line">      &lt;%= caption %&gt;</span><br><span class="line">    &lt;% <span class="keyword">else</span> %&gt;</span><br><span class="line">      &lt;span class=&quot;attachment__name&quot;&gt;&lt;%= blob.filename %&gt;&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;attachment__size&quot;&gt;&lt;%= number_to_human_size blob.byte_size %&gt;&lt;/span&gt;</span><br><span class="line">    &lt;% <span class="keyword">end</span> %&gt;</span><br><span class="line">  &lt;<span class="regexp">/figcaption&gt;</span></span><br><span class="line"><span class="regexp">&lt;/figure</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="在production-環境時上傳內嵌圖片到S3"><a href="#在production-環境時上傳內嵌圖片到S3" class="headerlink" title="在production 環境時上傳內嵌圖片到S3"></a>在production 環境時上傳內嵌圖片到S3</h2></li>
<li><p>在AWS S3註冊一個帳號，接著申請一個bucket及credential_key，取得它的access_key跟secret_access_key之後，在storage.yml裡面新增amazon的儲存方式，把資料填進去（這裏我使用figaro把敏感資料存成環境變數使用）。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#storage.yml</span></span><br><span class="line"><span class="symbol">amazon:</span></span><br><span class="line">  <span class="symbol">service:</span> S3</span><br><span class="line">  <span class="symbol">access_key_id:</span> &lt;%= ENV[<span class="string">&quot;aws_access_key_id&quot;</span>] %&gt;</span><br><span class="line">  <span class="symbol">secret_access_key:</span> &lt;%= ENV[<span class="string">&quot;aws_secret_access_key&quot;</span>] %&gt;</span><br><span class="line">  <span class="symbol">region:</span> <span class="string">&quot;your region&quot;</span></span><br><span class="line">  <span class="symbol">bucket:</span> <span class="string">&quot;your bucket name&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>設定active storage在production環境時，走amazon的儲存方式。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#production.rb</span></span><br><span class="line">config.active_storage.service = <span class="symbol">:amazon</span></span><br></pre></td></tr></table></figure></li>
<li><p>在S3的bucket設定跨來源資源分享(CORS)，授權我們domain跟AWS資料交換，</p>
<p> <img src="/2021/01/29/%E4%BD%BF%E7%94%A8Action-text%E7%B7%A8%E8%BC%AF%E5%99%A8%E4%B8%8A%E5%82%B3%E5%9C%96%E6%AA%94%E5%88%B0-AWS-S3/2.png"></p>
<p> <img src="/2021/01/29/%E4%BD%BF%E7%94%A8Action-text%E7%B7%A8%E8%BC%AF%E5%99%A8%E4%B8%8A%E5%82%B3%E5%9C%96%E6%AA%94%E5%88%B0-AWS-S3/3.png"></p>
</li>
<li><p>如此一來就可以上傳圖片到S3囉！</p>
<p> <img src="/2021/01/29/%E4%BD%BF%E7%94%A8Action-text%E7%B7%A8%E8%BC%AF%E5%99%A8%E4%B8%8A%E5%82%B3%E5%9C%96%E6%AA%94%E5%88%B0-AWS-S3/4.png"></p>
</li>
</ol>
<p>參考資料：<a href="https://pragmaticstudio.com/tutorials/using-active-storage-in-rails">https://pragmaticstudio.com/tutorials/using-active-storage-in-rails</a></p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>S3</tag>
      </tags>
  </entry>
  <entry>
    <title>類別與實體方法</title>
    <url>/2021/02/01/%E9%A1%9E%E5%88%A5%E8%88%87%E5%AF%A6%E9%AB%94%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="類別-Class-與實體-Instance"><a href="#類別-Class-與實體-Instance" class="headerlink" title="類別(Class)與實體(Instance)"></a>類別(Class)與實體(Instance)</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lakers</span> <span class="comment">#類別</span></span></span><br><span class="line">  def <span class="keyword">self</span>.all <span class="comment">#類別方法</span></span><br><span class="line">    puts <span class="string">&quot;defense!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shoot</span><span class="params">(shots)</span></span> <span class="comment">#實體方法</span></span><br><span class="line">    puts <span class="string">&quot;nails a <span class="subst">#&#123;shots&#125;</span>!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Lakers.all <span class="comment">#呼叫類別方法</span></span><br><span class="line"></span><br><span class="line">KCP = Lakers.new <span class="comment">#Lakers_player為類別，KCP為實體</span></span><br><span class="line">KCP.shoot <span class="string">&quot;three-pointer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#類別方法印出 defense!</span></span><br><span class="line"><span class="comment">#實體方法印出 nails a three-pointer!!</span></span><br></pre></td></tr></table></figure>
<h2 id="類別有繼承特性"><a href="#類別有繼承特性" class="headerlink" title="類別有繼承特性"></a>類別有繼承特性</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(foods)</span></span></span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;foods&#125;</span> 超好吃！&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> &lt; Animal <span class="comment">#繼承Animal，也可說是分類在Animal下面</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Amy = Cat.new</span><br><span class="line">Amy.eat <span class="string">&quot;小魚乾&quot;</span> <span class="comment">#印出小魚乾 超好吃！</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &lt; Animal <span class="comment">#繼承Animal，也可說是分類在Animal下面</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Ryan = Dog.new</span><br><span class="line">Ryan.eat <span class="string">&quot;潔牙骨&quot;</span> <span class="comment">#印出潔牙骨 超好吃！</span></span><br></pre></td></tr></table></figure>
<h2 id="物件初始化"><a href="#物件初始化" class="headerlink" title="物件初始化"></a>物件初始化</h2><p>實體會先吃到初始化的指令</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lakers_player</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    puts <span class="string">&quot;let&#x27;s go Lakers!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shoot</span><span class="params">(shots)</span></span></span><br><span class="line">    puts <span class="string">&quot;makes a <span class="subst">#&#123;shots&#125;</span>!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Davis = Lakers_player.new</span><br><span class="line">Davis.shoot <span class="string">&quot;10 foot jumpshot&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 印出let&#x27;s go Lakers!</span></span><br><span class="line"><span class="comment"># makes a 10 foot jumpshot!</span></span><br></pre></td></tr></table></figure>
<h2 id="實體變數-Instance-Variable"><a href="#實體變數-Instance-Variable" class="headerlink" title="實體變數(Instance Variable)"></a>實體變數(Instance Variable)</h2><p>寫法為 <code>@</code> 開頭的變數，可在實體中裡自由取用，而且每個實體之間互不相影響。在使用 new 方法製作實體的時候，也可以順便傳參數進去。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lakers</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name, position)</span></span></span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">    <span class="variable">@position</span> = position</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">introduction</span></span></span><br><span class="line">    puts <span class="string">&quot;Hi, my name is <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>, I play <span class="subst">#&#123;<span class="variable">@position</span>&#125;</span>.&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">Lebron = Lakers.new(<span class="string">&quot;Lebron&quot;</span>, <span class="string">&quot;Small Forward&quot;</span>)</span><br><span class="line">Lebron.introduction</span><br><span class="line"></span><br><span class="line"><span class="comment">#印出 Hi, my name is Lebron, I play Small Forward.</span></span><br></pre></td></tr></table></figure>
<h2 id="取用實體變數的方法："><a href="#取用實體變數的方法：" class="headerlink" title="取用實體變數的方法："></a>取用實體變數的方法：</h2><p>Ruby 的實體變數沒辦法直接從外部取用，否則會發生錯誤訊息：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Lebron = Lakers.new(<span class="string">&quot;Lebron&quot;</span>, <span class="string">&quot;Small Forward&quot;</span>)</span><br><span class="line">Lebron.position = <span class="string">&quot;Center&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#undefined method `position=&#x27; for #&lt;Lakers:0x00005648e0e018c8&gt; (NoMethodError)</span></span><br></pre></td></tr></table></figure>
<p>必須要將”.position=”這個方法先定義進去，才能取用</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lakers</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(position)</span></span></span><br><span class="line">    <span class="variable">@position</span> = position</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">position</span> </span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">@position</span> <span class="comment">#return可省略，會回傳<span class="doctag">@position</span>，這三行稱之getter</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">position=</span><span class="params">(new_position)</span></span> <span class="comment">#會設定我們下的參數，稱之setter</span></span><br><span class="line">    <span class="variable">@position</span> = new_position</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Lebron = Lakers.new(<span class="string">&quot;Small Forward&quot;</span>)</span><br><span class="line">Lebron.position = <span class="string">&quot;Center&quot;</span> <span class="comment">#原始寫法為 position=(&quot;Center&quot;)，“position=”是一個方法，後面的center是參數</span></span><br><span class="line">puts Lebron.position</span><br><span class="line"></span><br><span class="line"><span class="comment">#印出Center</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Ruby 有幫我們定義了三個方法來解決這件事，分別是 attr_reader、attr_writer 以及 attr_accessor。這三個方法分別會做出「讀取」、「設定」以及「讀取 + 設定」的方法，所以原來的有點囉嗦的寫法就可使用 attr_accessor 改寫成這樣：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lakers</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:position</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name, position)</span></span></span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">    <span class="variable">@position</span> = position</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">introduction</span></span></span><br><span class="line">    puts <span class="string">&quot;Hi, my name is <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>, I play <span class="subst">#&#123;<span class="variable">@position</span>&#125;</span>.&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Lebron = Lakers.new(<span class="string">&quot;Lebron&quot;</span>, <span class="string">&quot;Small Forward&quot;</span>)</span><br><span class="line">Lebron.position = <span class="string">&quot;Center&quot;</span> </span><br><span class="line">puts Lebron.introduction</span><br><span class="line"></span><br><span class="line"><span class="comment">#印出Hi, my name is Lebron, I play Center.</span></span><br></pre></td></tr></table></figure>
<h2 id="類別變數-Class-Variable"><a href="#類別變數-Class-Variable" class="headerlink" title="類別變數(Class Variable)"></a>類別變數(Class Variable)</h2><p>隨著類別活著</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">  <span class="variable">@@count</span> = <span class="number">0</span> <span class="comment">#類別變數</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    <span class="variable">@@count</span> += <span class="number">1</span> <span class="comment">#x += y =&gt; x = x + y</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  def <span class="keyword">self</span>.counter <span class="comment">#類別方法</span></span><br><span class="line">    <span class="keyword">return</span> @@count</span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.times &#123; Dog.new &#125;</span><br><span class="line">p Dog.counter</span><br><span class="line"></span><br><span class="line"><span class="comment">#印出5</span></span><br></pre></td></tr></table></figure>
<h2 id="開放類別-Open-Class"><a href="#開放類別-Open-Class" class="headerlink" title="開放類別(Open Class)"></a>開放類別(Open Class)</h2><p>如果同時出現多個相同名字的類別，在ruby的世界裡面，並不會由後面的覆蓋掉前面的，而是相互融合。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lakers</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hi</span></span></span><br><span class="line">    puts <span class="string">&quot;hi&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lakers</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">yo</span></span></span><br><span class="line">    puts <span class="string">&quot;yo&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Lebron = Lakers.new</span><br><span class="line">Lebron.yo <span class="comment">#印出yo</span></span><br><span class="line">Lebron.hi <span class="comment">#印出hi</span></span><br></pre></td></tr></table></figure>
<p>ruby甚至可以改原本預設的類別，如string, integer..等</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">+</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="number">100</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p <span class="number">1</span> + <span class="number">2</span> <span class="comment">#原始寫法是1物件呼叫+方法帶入2這個參數 p 1.+(2)，印出100</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">say_hi</span></span></span><br><span class="line">    puts <span class="string">&quot;hello <span class="subst">#&#123;<span class="keyword">self</span>&#125;</span>!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;Phil&quot;</span>.say_hi <span class="comment">#印出 hello Phil!</span></span><br></pre></td></tr></table></figure>
<h2 id="方法的存取控制"><a href="#方法的存取控制" class="headerlink" title="方法的存取控制"></a>方法的存取控制</h2><p>類別的方法存取限制常見的主要有三種：public、protected 以及 private。</p>
<ul>
<li>public: 一般沒有特別註明就是public，所有的人都可以直接存取。</li>
<li>private: 在類別內部才可以存取。</li>
<li>protected(非常少用): 差不多是在這兩者之間，比 private 寬鬆一些，但又沒有 public 那麼自在，protected 在同一個類別內或是同一個 package，或是繼承它的子類別可以自由取用，但如果不是的話則不可存取。</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span></span><br><span class="line">  def walk <span class="comment">#public</span></span><br><span class="line">    puts <span class="string">&quot;一天一萬步 醫生遠離我&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eat</span></span></span><br><span class="line">    puts <span class="string">&quot;yumyum&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  protected</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sleep</span></span></span><br><span class="line">    puts <span class="string">&quot;Zzz&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Phil = Human.new</span><br><span class="line">Phil.walk <span class="comment">#印出一天一萬步 醫生遠離我</span></span><br><span class="line">Phil.eat <span class="comment">#NoMethodError</span></span><br><span class="line">Phil.sleep <span class="comment">#NoMethodError</span></span><br></pre></td></tr></table></figure>
<p>Phil.eat這段code，在ruby的世界裡，指的是發送了eat這個訊息(message)給Phil這個接收者(receiver)，而Private用法的規定，就是不能有接收者，也就是前面不能有小數點符號。</p>
<p>也有一些方法可以繞過這個規定，只要把eat這個方法當作參數傳回去即可從外部呼叫這個方法：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Phil.send (<span class="symbol">:eat</span>) <span class="comment">#印出yumyum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可動態執行方法</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL基本語法-查詢、更新、刪除</title>
    <url>/2021/02/03/SQL%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95-%E6%9F%A5%E8%A9%A2%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%AA%E9%99%A4/</url>
    <content><![CDATA[<p>學習Ruby on Rails的過程中，因為都透過model來跟資料庫溝通，常常忽略掉最根本的SQL語法，所以接下來會在開發app的過程中，繼續把這塊補起來。<br>（以下都以一拳超人的資料庫為範本）</p>
<h2 id="查詢資料"><a href="#查詢資料" class="headerlink" title="查詢資料"></a>查詢資料</h2><ol>
<li><p>查全部資料</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes;</span><br></pre></td></tr></table></figure></li>
<li><p>查全部S級英雄的資料</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> hero_level = <span class="string">&#x27;S&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>查全部S級女性英雄的資料</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> hero_level = <span class="string">&#x27;S&#x27;</span> <span class="keyword">AND</span> gender = <span class="string">&#x27;F&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>只查部分欄位</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, gender</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> hero_level = <span class="string">&#x27;S&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>查空值的資料</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>查擁有關鍵字的資料</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%背心%&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>查某個區間的資料</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#數字不需要引號</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> age &gt;= <span class="number">10</span> <span class="keyword">AND</span> age &lt;= <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#可簡寫為</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">AND</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>查所有 S 級跟 A 級的英雄</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> hero_level = <span class="string">&#x27;S&#x27;</span> <span class="keyword">OR</span> hero_level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> hero_level <span class="keyword">IN</span> (<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;A&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>查不符合條件的資料</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> hero_level &lt;&gt; <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;&gt;為不等於的意思</span></span><br></pre></td></tr></table></figure></li>
<li><p>查不是 S 級也不是 A 級的英雄</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> hero_level <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="更新資料"><a href="#更新資料" class="headerlink" title="更新資料"></a>更新資料</h2></li>
<li><p>更新單筆資料的某個欄位</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> heroes</span><br><span class="line"><span class="keyword">SET</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">25</span></span><br></pre></td></tr></table></figure></li>
<li><p>更新單筆資料的多個欄位</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> heroes</span><br><span class="line"><span class="keyword">SET</span> age = <span class="number">10</span>, hero_level = <span class="string">&#x27;A&#x27;</span>, hero_rank = <span class="number">5</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">25</span></span><br></pre></td></tr></table></figure></li>
<li><p>更新全部資料的某個欄位</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> heroes</span><br><span class="line"><span class="keyword">SET</span> age = age + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="刪除資料"><a href="#刪除資料" class="headerlink" title="刪除資料"></a>刪除資料</h2></li>
</ol>
<p>刪除符合某個條件的所有資料</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> heroes</span><br><span class="line"><span class="keyword">WHERE</span> hero_level = <span class="string">&#x27;C&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>
