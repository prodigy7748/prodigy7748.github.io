<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>N + 1 query</title>
    <url>/2020/12/01/N-1-query/</url>
    <content><![CDATA[<p>當我們在rails專案裡面執行關聯性的查詢時，時常會出現N+1 query的狀況，造成效能浪費。舉個例子，在一些網站上我們常可以看到使用者(user)可以針對文章(post)有多個評論(comment)，而我們想在頁面上列出所有comment以及每個comment的user是誰時，就會出現N + 1 query：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">	has_many <span class="symbol">:comments</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#comment model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> &lt; ApplicationRecord</span></span><br><span class="line">	belongs_to <span class="symbol">:user</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#post model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> &lt; ApplicationRecord</span></span><br><span class="line">	has_many <span class="symbol">:comments</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#posts_controller</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">  <span class="variable">@comment</span> = Comment.new</span><br><span class="line">  <span class="variable">@comments</span> = <span class="variable">@post</span>.comments</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#post的show頁面,列出此post所有comments，並且標示user</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;% <span class="variable">@comments</span>.each <span class="keyword">do</span> <span class="params">|comment|</span> %&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    [&lt;%= comment.user.nickname %&gt;]</span><br><span class="line">		&lt;%= comment.content %&gt;</span><br><span class="line">	&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/ul</span>&gt;</span><br></pre></td></tr></table></figure>

<p>只要每次我們刷新show頁面時，除了撈出所有comments以外，還會針對每一個comment去跑迴圈，到資料庫撈它的user，而所謂的N指的就是這個動作。</p>
<p><img src="/2020/12/01/N-1-query/N+1.png"></p>
<h2 id="使用includes方法解決-eager-loading"><a href="#使用includes方法解決-eager-loading" class="headerlink" title="使用includes方法解決(eager loading)"></a>使用includes方法解決(eager loading)</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#posts_controller</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">  <span class="variable">@comment</span> = Comment.new</span><br><span class="line">  <span class="variable">@comments</span> = <span class="variable">@post</span>.comments.includes(<span class="symbol">:user</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查詢post的所有comment時，把user資料一併關聯進來，就可以先分析並一次把user資料撈出來。</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/12/01/N-1-query/includes.png"></p>
<p>從畫面可以看到從原本的N + 1的查詢，變成1 + 1了，而SQL語法則使用IN()取代原本一筆筆用=去取資料，一次所有相關user資料撈出來。</p>
<p>網路上其實也有人針對rails的N + 1問題做成套件，當發生此問題就會跳出提醒，相關資訊和安裝方式可參考：<a href="https://github.com/flyerhzm/bullet">https://github.com/flyerhzm/bullet</a></p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails 學習筆記-Block</title>
    <url>/2020/11/30/Ruby%20on%20Rails%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-Block/</url>
    <content><![CDATA[<h2 id="Block的寫法有哪些？"><a href="#Block的寫法有哪些？" class="headerlink" title="Block的寫法有哪些？"></a>Block的寫法有哪些？</h2><ul>
<li>do..end</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">	puts i</span><br><span class="line"><span class="keyword">end</span>	</span><br></pre></td></tr></table></figure>

<ul>
<li>花括號{ }</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>.times &#123; <span class="params">|i|</span></span><br><span class="line">	puts i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note: block裡面可帶參數進去，例子中是|i|，但這個i只在block裡面作用，類似JS匿名function的參數。</p>
<h2 id="兩種寫法有何不同？"><a href="#兩種寫法有何不同？" class="headerlink" title="兩種寫法有何不同？"></a>兩種寫法有何不同？</h2><p>一般我們遇到比較可以一行搞定的，通常就會選擇花括號，而比較負責的邏輯判斷時，則使用do..end寫法，但這兩種方法還是有一些差異存在，以下舉一個簡單的例子給大家看看。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">p array.map&#123; <span class="params">|a|</span> a * a &#125;</span><br><span class="line"></span><br><span class="line">p array.map <span class="keyword">do</span></span><br><span class="line">  <span class="params">|a|</span> a * a </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ruby常省略小括號，原型其實是：</span><br><span class="line">p(array.map&#123; <span class="params">|a|</span> a * a &#125;) <span class="comment"># 印出 [1, 9, 25, 49]</span></span><br><span class="line"></span><br><span class="line">p(array.map) <span class="keyword">do</span> <span class="comment">#印出 &lt;Enumerator: [1, 3, 5, 7]:map&gt;</span></span><br><span class="line">  <span class="params">|a|</span> a * a </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>上面兩種結果顯示do..end這個寫法的結合力較差，在這個例子中的array.map優先跟p結合，而不是後面的block,所以後面的block無法被順利執行。</p>
<h2 id="Block不是物件，無法獨立使用"><a href="#Block不是物件，無法獨立使用" class="headerlink" title="Block不是物件，無法獨立使用"></a>Block不是物件，無法獨立使用</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123; puts <span class="string">&quot;hello&quot;</span> &#125; <span class="comment">#出現語法錯誤</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> puts <span class="string">&quot;hello&quot;</span> <span class="keyword">end</span> <span class="comment">#語法錯誤</span></span><br></pre></td></tr></table></figure>

<h2 id="使用Proc、lambda將block物件化"><a href="#使用Proc、lambda將block物件化" class="headerlink" title="使用Proc、lambda將block物件化"></a>使用Proc、lambda將block物件化</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用Proc</span></span><br><span class="line">	times_five = Proc.new &#123; <span class="params">|x|</span> x * <span class="number">5</span> &#125; <span class="comment">#後面的block變成一個物件，並且可以傳參數進去</span></span><br><span class="line"></span><br><span class="line">p times_five.call(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line">p times_five. === <span class="number">3</span> <span class="comment">#印出15</span></span><br><span class="line">p times_five.(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line">p times_five[<span class="number">3</span>] <span class="comment">#印出15</span></span><br><span class="line">p times_five.<span class="keyword">yield</span>(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用lambda</span></span><br><span class="line">times_five = <span class="built_in">lambda</span> &#123;<span class="params">|x|</span> x * <span class="number">5</span>&#125; <span class="comment">#後面不需要加new方法</span></span><br><span class="line">times_five = -&gt; (x) &#123; x * <span class="number">5</span>&#125; <span class="comment">#lambda的另一種寫法</span></span><br><span class="line"></span><br><span class="line">p times_five.call(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line">p times_five. === <span class="number">3</span> <span class="comment">#印出15</span></span><br><span class="line">p times_five.(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line">p times_five[<span class="number">3</span>] <span class="comment">#印出15</span></span><br><span class="line">p times_five.<span class="keyword">yield</span>(<span class="number">3</span>) <span class="comment">#印出15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#兩種方式使用上的不同</span></span><br><span class="line">times_five = Proc.new &#123; <span class="params">|x|</span> x * <span class="number">5</span> &#125; <span class="comment">#執行像是block</span></span><br><span class="line">p times_five.call(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">#正常執行，但只帶第一個引數，印出5。如果絕對值裡面有兩個參數，就可以帶兩個引數進去</span></span><br><span class="line"></span><br><span class="line">times_five = <span class="built_in">lambda</span> &#123;<span class="params">|x|</span> x * <span class="number">5</span>&#125; <span class="comment">#執行像是方法，參數和引數數量必須相同</span></span><br><span class="line">p times_five.call(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">#wrong number of arguments (given 3, expected 1) (引數個數錯誤)</span></span><br></pre></td></tr></table></figure>

<h2 id="Block是如何被執行的？"><a href="#Block是如何被執行的？" class="headerlink" title="Block是如何被執行的？"></a>Block是如何被執行的？</h2><p>可使用yield將控制權交給block執行內容</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span></span></span><br><span class="line">  puts <span class="string">&quot;hello, phil&quot;</span></span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  puts <span class="string">&quot;let&#x27;s go lakers&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">greeting&#123;</span><br><span class="line">  puts <span class="string">&quot;have you watched NBA final today?&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;2 more wins to go!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#印出</span></span><br><span class="line">hello, phil</span><br><span class="line">have you watched NBA final today?</span><br><span class="line">let<span class="string">&#x27;s go lakers</span></span><br><span class="line"><span class="string">2 more wins to go!</span></span><br></pre></td></tr></table></figure>

<h2 id="應用block概念土炮手動-select"><a href="#應用block概念土炮手動-select" class="headerlink" title="應用block概念土炮手動.select"></a>應用block概念土炮手動.select</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_select</span><span class="params">(list)</span></span></span><br><span class="line">  result = [] <span class="comment">#製作空陣列</span></span><br><span class="line">	  list.each <span class="keyword">do</span> <span class="params">|n|</span> <span class="comment">#將list裡面的每個數字拋進來</span></span><br><span class="line">	   result &lt;&lt; n <span class="keyword">if</span> <span class="keyword">yield</span>(n) <span class="comment">#將數字再給回下面block執行，如果成立，丟到result的陣列裡面</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result <span class="comment">#回傳結果</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p my_select([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) &#123; <span class="params">|i|</span> i.odd? &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#印出[1, 3, 5]</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Block</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails學習筆記-模組(Module)</title>
    <url>/2020/11/28/Ruby%20on%20Rails%20%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-Module/</url>
    <content><![CDATA[<p>有時有多個類別都需要使用同個方法，這時候可以定義一個模組，讓每個類別可以引入取用。</p>
<h2 id="模組與繼承的不同之處："><a href="#模組與繼承的不同之處：" class="headerlink" title="模組與繼承的不同之處："></a>模組與繼承的不同之處：</h2><ul>
<li>模組沒有繼承的功能：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Flyable</span> &lt; other <span class="title">module</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#無法繼承</span></span><br></pre></td></tr></table></figure>

<ul>
<li>模組不能被實體化：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Flyable</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Dog = Flyable.new </span><br><span class="line"></span><br><span class="line"><span class="comment">#undefined method `new&#x27; for Flyable:Module (NoMethodErro</span></span><br></pre></td></tr></table></figure>

<h2 id="模組引入有兩種寫法："><a href="#模組引入有兩種寫法：" class="headerlink" title="模組引入有兩種寫法："></a>模組引入有兩種寫法：</h2><ol>
<li>在類別內include模組，此類別製造的實體可使用模組的方法（實體方法）</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Invisible</span></span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">woolala</span></span></span><br><span class="line">  puts <span class="string">&quot;nobody can see <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span> now!&quot;</span></span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span></span><br><span class="line">  <span class="keyword">include</span> Invisible</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Phil = Human.new(<span class="string">&quot;Phil&quot;</span>)</span><br><span class="line">Phil.woolala</span><br><span class="line"></span><br><span class="line"><span class="comment">#印出 nobody can see Phil now!</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>  在類別內extend模組，此類別可直接使用方法（類別方法），但其製造的實體不可使用此方法</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Flyable</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fly</span></span></span><br><span class="line">    puts <span class="string">&#x27;I can Fly!&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><br><span class="line">	extend Flyable</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Cat.fly</span><br><span class="line"><span class="comment">#印出 I can Fly!</span></span><br><span class="line"></span><br><span class="line">Phil = Cat.new</span><br><span class="line">Phil.fly</span><br><span class="line"><span class="comment">#undefined method `fly&#x27; for #&lt;Cat:0x0000563c17581b38&gt; (NoMethodError)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="如有重複的類別名稱，可用不同模組區隔，製作實體時，需用”-“來鎖定欲呼叫的類別。"><a href="#如有重複的類別名稱，可用不同模組區隔，製作實體時，需用”-“來鎖定欲呼叫的類別。" class="headerlink" title="如有重複的類別名稱，可用不同模組區隔，製作實體時，需用” :: “來鎖定欲呼叫的類別。"></a>如有重複的類別名稱，可用不同模組區隔，製作實體時，需用” :: “來鎖定欲呼叫的類別。</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">	<span class="class"><span class="keyword">module</span> <span class="title">Z</span></span></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">B</span></span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Ryan = A::Z::Dog.new <span class="comment">#必須一層層呼叫到類別</span></span><br><span class="line">Will = B::Dog.new</span><br></pre></td></tr></table></figure>

<p>冒號的位置在Ruby代表不同意思</p>
<ul>
<li>冒號在左邊，代表符號</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">has_name <span class="symbol">:name</span></span><br></pre></td></tr></table></figure>

<ul>
<li>冒號在右邊，代表hash裡面的key</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123;<span class="symbol">name:</span> <span class="string">&quot;Phil&quot;</span>, <span class="symbol">age:</span> <span class="number">32</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>冒號在中間，前者是key，後者是符號，中間用空格隔開</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&#123;<span class="symbol">direction:</span> <span class="symbol">:up</span>, <span class="symbol">power:</span> <span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>冒號在中間，而且沒有空格，代表呼叫模組裡面的類別</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base <span class="comment">#User繼承ActiveRecord模組裡面的Base類別</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Module</tag>
      </tags>
  </entry>
  <entry>
    <title>gem-devise-如何略過編輯user資料時，必須提供密碼的步驟？</title>
    <url>/2020/12/22/%5Bgem%5Ddevise-%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A8%BB%E5%86%8A%E5%8F%8A%E6%9B%B4%E6%96%B0user%E8%B3%87%E6%96%99%E6%99%82%E5%A6%82%E6%9E%9C%E5%A2%9E%E5%8A%A0%E6%AC%84%E4%BD%8D%EF%BC%9F%20copy/</url>
    <content><![CDATA[<ol>
<li><p>因為devise預設都是吃Devise controller(如Devise::RegistrationsController)，所以如果要更改設定，必須先建立另一個controller蓋過原始設定。</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>rails generate <span class="symbol">devise:</span>controllers [scope]</span><br><span class="line"><span class="comment">#這邊的scope我使用users</span></span><br></pre></td></tr></table></figure>

<p> devise會幫你建立八個controller，如果不想那麼多，可以用以下指令替代</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>rails generate <span class="symbol">devise:</span>controllers users -c=sessions</span><br><span class="line"><span class="comment">#只建立sessions這個controller</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>到routes.rb這邊放入這段code，告訴router使用我們建立的controller</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">devise_for <span class="symbol">:users</span>, <span class="symbol">controllers:</span> &#123; <span class="symbol">registrations:</span> <span class="string">&#x27;registrations&#x27;</span> &#125;</span><br><span class="line"><span class="comment"># 其他controller如需要也可比照辦理</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在registration.controller底下，放入這段code</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_resource</span><span class="params">(resource, params)</span></span></span><br><span class="line">    resource.update_without_password(params)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在application_controller.rb裡面，放入這段code，讓我們新建的欄位，可以被params抓到並傳送</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure_permitted_parameters</span></span></span><br><span class="line">    devise_parameter_sanitizer.permit(<span class="symbol">:sign_up</span>, <span class="symbol">keys:</span> [<span class="symbol">:name</span>])</span><br><span class="line">    devise_parameter_sanitizer.permit(<span class="symbol">:account_update</span>, <span class="symbol">keys:</span> [<span class="symbol">:name</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>如此一來，就可以在不需要輸入密碼的情況下更改資料。</p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>gem</tag>
        <tag>devise</tag>
      </tags>
  </entry>
  <entry>
    <title>gem-devise-如何在註冊及更新user資料時增加欄位？</title>
    <url>/2020/12/20/%5Bgem%5Ddevise-%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A8%BB%E5%86%8A%E5%8F%8A%E6%9B%B4%E6%96%B0user%E8%B3%87%E6%96%99%E6%99%82%E5%A6%82%E6%9E%9C%E5%A2%9E%E5%8A%A0%E6%AC%84%E4%BD%8D%EF%BC%9F/</url>
    <content><![CDATA[<p>在使用devise這個gem的時候，雖然它已經幫我們預設做了很多事情，但總是有我們需要客製化的時候，這時候我們可以透過以下步驟來達到目的：</p>
<ol>
<li><p>建立一個 migration，在table新增需要的欄位</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddColumnToUsers</span> &lt; ActiveRecord::Migration[6.0]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    add_column <span class="symbol">:users</span>, <span class="symbol">:name</span>, <span class="symbol">:string</span></span><br><span class="line">    add_column <span class="symbol">:users</span>, <span class="symbol">:birthday</span>, <span class="symbol">:datetime</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>rails db:migrate</p>
</li>
<li><p>確認schema.rb裡面已經加入欄位</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">create_table <span class="string">&quot;users&quot;</span>, <span class="symbol">force:</span> <span class="symbol">:cascade</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">    t.string <span class="string">&quot;email&quot;</span>, <span class="symbol">default:</span> <span class="string">&quot;&quot;</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    t.string <span class="string">&quot;encrypted_password&quot;</span>, <span class="symbol">default:</span> <span class="string">&quot;&quot;</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    t.string <span class="string">&quot;reset_password_token&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;reset_password_sent_at&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;remember_created_at&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;created_at&quot;</span>, <span class="symbol">precision:</span> <span class="number">6</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    t.datetime <span class="string">&quot;updated_at&quot;</span>, <span class="symbol">precision:</span> <span class="number">6</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">    t.string <span class="string">&quot;name&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;birthday&quot;</span></span><br><span class="line">    t.string <span class="string">&quot;confirmation_token&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;confirmed_at&quot;</span></span><br><span class="line">    t.datetime <span class="string">&quot;confirmation_sent_at&quot;</span></span><br><span class="line">    t.string <span class="string">&quot;unconfirmed_email&quot;</span></span><br><span class="line">    t.index [<span class="string">&quot;confirmation_token&quot;</span>], <span class="symbol">name:</span> <span class="string">&quot;index_users_on_confirmation_token&quot;</span>, <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">    t.index [<span class="string">&quot;email&quot;</span>], <span class="symbol">name:</span> <span class="string">&quot;index_users_on_email&quot;</span>, <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">    t.index [<span class="string">&quot;reset_password_token&quot;</span>], <span class="symbol">name:</span> <span class="string">&quot;index_users_on_reset_password_token&quot;</span>, <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>參考devise官網的指示，讓新欄位的parameters允許通過<a href="https://github.com/heartcombo/devise#strong-parameters">https://github.com/heartcombo/devise#strong-parameters</a></p>
</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">def configure_permitted_parameters</span><br><span class="line">    devise_parameter_sanitizer.permit(:sign_up, <span class="attr">keys</span>: [:name])</span><br><span class="line">    devise_parameter_sanitizer.permit(:account_update, <span class="attr">keys</span>: [:name])</span><br><span class="line"> end</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>最後回到頁面將新增欄位show出來</li>
</ol>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>gem</tag>
        <tag>devise</tag>
      </tags>
  </entry>
  <entry>
    <title>常用終端機指令</title>
    <url>/2020/12/04/%E5%B8%B8%E7%94%A8%E7%B5%82%E7%AB%AF%E6%A9%9F%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="進入目錄"><a href="#進入目錄" class="headerlink" title="進入目錄"></a>進入目錄</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cd .   <span class="comment">#目錄原地</span></span><br><span class="line"><span class="variable">$ </span>cd ..  <span class="comment">#回目錄的上一層</span></span><br><span class="line"><span class="variable">$ </span>cd -   <span class="comment">#回上一動作的目錄層</span></span><br><span class="line"><span class="variable">$ </span>pwd    <span class="comment">#確認當前目錄所在層</span></span><br></pre></td></tr></table></figure>

<h2 id="更改檔案權限"><a href="#更改檔案權限" class="headerlink" title="更改檔案權限"></a>更改檔案權限</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod ugo+r file.test <span class="comment"># 幫所有人開讀取權限</span></span><br><span class="line"><span class="variable">$ </span>chmod <span class="number">777</span> file.test <span class="comment"># 幫file.test這個檔案權限全開</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 檔案前面顯示的rwx r-x r-x 分別是檔案擁有者、群組、其他人的權限</span></span><br><span class="line"><span class="comment"># r 表示可讀取，w 表示可寫入，x 表示可執行</span></span><br><span class="line"><span class="comment"># 可使用二進位法 r=4，w=2，x=1</span></span><br><span class="line"><span class="comment"># 若要rwx屬性則4+2+1=7；</span></span><br><span class="line"><span class="comment"># 若要rw-屬性則4+2=6；</span></span><br><span class="line"><span class="comment"># 若要r-x屬性則4+1=7。</span></span><br></pre></td></tr></table></figure>

<h2 id="查看檔案清單"><a href="#查看檔案清單" class="headerlink" title="查看檔案清單"></a>查看檔案清單</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ls -l  <span class="comment">#顯示這個目錄內的物件 </span></span><br><span class="line"><span class="variable">$ </span>ls -al <span class="comment">#顯示這個目錄內包含隱藏檔的物件</span></span><br></pre></td></tr></table></figure>

<h2 id="刪除檔案"><a href="#刪除檔案" class="headerlink" title="刪除檔案"></a>刪除檔案</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>rm  a    <span class="comment"># 移除 a 檔案</span></span><br><span class="line"><span class="variable">$ </span>rm -rf b <span class="comment"># 強制移除b資料夾(慎用)</span></span><br><span class="line">           <span class="comment"># &quot;f&quot;orce = 強制 </span></span><br><span class="line">           <span class="comment"># &quot;r&quot;ecursive = 層遞 </span></span><br><span class="line">           <span class="comment"># 空格代表 and</span></span><br><span class="line"><span class="variable">$ </span>rm file* <span class="comment"># 刪除以 file 開頭為檔名的所有檔案</span></span><br></pre></td></tr></table></figure>

<h2 id="檔案建立-更改"><a href="#檔案建立-更改" class="headerlink" title="檔案建立/更改"></a>檔案建立/更改</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>mv a b               <span class="comment">#將 a 檔名改成 b</span></span><br><span class="line"><span class="variable">$ </span>cp a b               <span class="comment">#將 a 檔複製後命名成 b</span></span><br><span class="line"><span class="variable">$ </span>cat a                <span class="comment">#查 a 檔案內容</span></span><br><span class="line"><span class="variable">$ </span>echo <span class="string">&quot;b&quot;</span> &gt;file.test  <span class="comment">#將 &quot;b&quot; 寫進file.test</span></span><br><span class="line"><span class="variable">$ </span>touch a              <span class="comment">#新增 a 檔案</span></span><br><span class="line"><span class="variable">$ </span>touch abc/def        <span class="comment">#在 abc 底下新增 def 檔案</span></span><br><span class="line"><span class="variable">$ </span>vim a                <span class="comment">#更改 a 檔案內容</span></span><br></pre></td></tr></table></figure>

<h2 id="資料夾建立"><a href="#資料夾建立" class="headerlink" title="資料夾建立"></a>資料夾建立</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>mkdir abc        建立 abc 資料夾</span><br></pre></td></tr></table></figure>

<h2 id="整理終端機頁面"><a href="#整理終端機頁面" class="headerlink" title="整理終端機頁面"></a>整理終端機頁面</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ctrl + w  <span class="comment"># 刪除一段字</span></span><br><span class="line"><span class="variable">$ </span>ctrl + u  <span class="comment"># 整行刪除</span></span><br><span class="line"><span class="variable">$ </span>ctrl + l  <span class="comment"># 清理排面</span></span><br><span class="line"><span class="variable">$ </span>ctrl + r  <span class="comment"># 查詢曾下過的指令</span></span><br><span class="line"><span class="variable">$ </span>cmd + k   <span class="comment"># 全部清除，往上捲也找不到紀錄</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>符號與字串的不同</title>
    <url>/2020/12/03/%E7%AC%A6%E8%99%9F%E8%88%87%E5%AD%97%E4%B8%B2%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
    <content><![CDATA[<h1 id="與String-字串-有何不同？"><a href="#與String-字串-有何不同？" class="headerlink" title="與String(字串)有何不同？"></a>與String(字串)有何不同？</h1><h2 id="1-string的內容可以變，symbol不行"><a href="#1-string的內容可以變，symbol不行" class="headerlink" title="1. string的內容可以變，symbol不行"></a><strong>1. string的內容可以變，symbol不行</strong></h2><p>相似之處在於，他們都可以使用字元方法如.length及.upcase等，也都可以使用中括號 + 索引來取得其中某個字元，但如果想修改symbol的內容，會發生語法錯誤，<em>因為 Symbol 類別並沒有 []= 這個方法。</em></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:lakers</span>.length =&gt; <span class="number">6</span></span><br><span class="line"><span class="symbol">:lakers</span>.capitalize[<span class="number">0</span>] =&gt; <span class="string">&quot;L&quot;</span></span><br><span class="line"><span class="symbol">:lakers</span>[<span class="number">0</span>] = <span class="string">&quot;k&quot;</span></span><br><span class="line">undefined method <span class="string">`[]=&#x27; for :lakers:Symbol</span></span><br></pre></td></tr></table></figure>

<h2 id="2-symbol的提取效率比string好"><a href="#2-symbol的提取效率比string好" class="headerlink" title="2. symbol的提取效率比string好"></a><strong>2. symbol的提取效率比string好</strong></h2><p>上面提到，相同的string對ruby來說是不同物件，而相同的symbol則對應到記憶體中的相同物件。不同symbol 在做比較的時候，是直接比對這兩顆物件的 object_id是否相同，而字串比較則是一個字母一個字母逐一比對。所以在效率上來說，string在做比較的時間複雜度會隨著字母的數量而增加，但 Symbol 因為只比較是不是同一個物件，所以它的複雜度是不變的。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>.times <span class="keyword">do</span> puts <span class="string">&quot;lakers&quot;</span>.object_id</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">=&gt;<span class="number">47397526282660</span></span><br><span class="line"><span class="number">47397526282360</span></span><br><span class="line"><span class="number">47397526285620</span></span><br><span class="line"><span class="number">47397526212580</span></span><br><span class="line"><span class="number">47397526212520</span></span><br><span class="line"><span class="number">5</span>.times <span class="keyword">do</span> puts <span class="symbol">:lakers</span>.object_id</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">=&gt;<span class="number">1031708</span></span><br><span class="line"><span class="number">1031708</span></span><br><span class="line"><span class="number">1031708</span></span><br><span class="line"><span class="number">1031708</span></span><br><span class="line"><span class="number">1031708</span></span><br></pre></td></tr></table></figure>

<h2 id="3-string跟symbol間可以互相轉換"><a href="#3-string跟symbol間可以互相轉換" class="headerlink" title="3. string跟symbol間可以互相轉換"></a><strong>3. string跟symbol間可以互相轉換</strong></h2><ul>
<li>string可透過.to_sym及.intern轉換成symbol。</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;lakers&quot;</span>.to_sym</span><br><span class="line">=&gt; <span class="symbol">:lakers</span></span><br><span class="line"><span class="string">&quot;lakers&quot;</span>.intern</span><br><span class="line">=&gt; <span class="symbol">:lakers</span></span><br></pre></td></tr></table></figure>

<ul>
<li>symbol則可透過.to_s及id2name轉換成string。</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:lakers</span>.to_s</span><br><span class="line">=&gt; <span class="string">&quot;lakers&quot;</span></span><br><span class="line"><span class="symbol">:lakers</span>.id2name</span><br><span class="line">=&gt; <span class="string">&quot;lakers&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-如果把-String-給”冰凍”-freeze-起來，它便不可修改，object-id-也會是同樣的。"><a href="#4-如果把-String-給”冰凍”-freeze-起來，它便不可修改，object-id-也會是同樣的。" class="headerlink" title="4. 如果把 String 給”冰凍”(freeze)起來，它便不可修改，object_id 也會是同樣的。"></a><strong>4. 如果把 String 給”冰凍”(freeze)起來，它便不可修改，object_id 也會是同樣的。</strong></h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>.times <span class="keyword">do</span>   </span><br><span class="line">  puts <span class="string">&quot;hello&quot;</span>.freeze.object_id </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="comment"># =&gt; 70314415546380 </span></span><br><span class="line"><span class="comment"># =&gt; 70314415546380 </span></span><br><span class="line"><span class="comment"># =&gt; 70314415546380</span></span><br></pre></td></tr></table></figure>

<h1 id="Symbol的使用時機？"><a href="#Symbol的使用時機？" class="headerlink" title="Symbol的使用時機？"></a>Symbol的使用時機？</h1><blockquote>
<p>Strings are used to work with data.<br>Symbols are identifiers.<br>You should use symbols as names or labels for things (like methods) &amp;<br>use strings when you care more about the data (individual characters).</p>
</blockquote>
<p>當我們需要內容是不可變動時，可使用symbol，因為 Symbol具有不可變(immutable)，像標籤一樣的特性，以及它的查找、比較的速度比字串還快，它很適合用來當 Hash 的 Key。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">hash = &#123;<span class="symbol">a:</span> <span class="number">1</span>, <span class="symbol">b:</span> <span class="number">2</span>, <span class="symbol">c:</span> <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>另外有的方法的參數是用字串，有的是用 Symbol，有的是兩種都能用，那該怎麼知道該用哪一種?可參考<a href="https://ruby-doc.org/core-2.7.2/">ruby官方api。</a></p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><p><a href="https://ruby-doc.org/core-2.7.2/">Ruby 2.7.2</a></p>
<p><a href="https://kaochenlong.com/2016/04/25/string-and-symbol/">Ruby 語法放大鏡之「有的變數變前面有一個冒號(例如 :name)，是什麼意思?」 | 高見龍</a></p>
<p><a href="https://www.rubyguides.com/2018/02/ruby-symbols/">What Are Ruby Symbols &amp; How Do They Work? - RubyGuides</a></p>
<p><a href="https://pjchender.github.io/2017/09/26/ruby-symbol%EF%BC%88%E7%AC%A6%E8%99%9F%EF%BC%89/">[Ruby] Symbol（符號）</a></p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Symbol</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在一個form裡面寫入兩個model的欄位？如何刪除？</title>
    <url>/2020/12/28/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%80%8Bform%E8%A3%A1%E9%9D%A2%E5%AF%AB%E5%85%A5%E5%85%A9%E5%80%8Bmodel%E7%9A%84%E6%AC%84%E4%BD%8D%EF%BC%9F%E5%A6%82%E4%BD%95%E5%88%AA%E9%99%A4%EF%BC%9F/</url>
    <content><![CDATA[<p>在剛學習rails的時候，表單通常都是單純的一個model填完欄位就送出，直到實際專案在進行時，才遇到需要將兩個model放在同一個form裡面，同時可以儲存資料到個別model的資料庫的需求。這時候就需要用到本篇文章要介紹的主角：Nested form</p>
<p>在我們募資網站的專案例子中，project跟givebacks(回饋商品)是一對多的關係，而我們想在project new頁面的form裡面，同時放入giveback的欄位，可使用fields_for，將兩個model放在同一個form裡面。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#project.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line">  has_many <span class="symbol">:givebacks</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#giveback.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Giveback</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:project</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>按照官方文件的說明，我大概將它分成四個步驟：</p>
<ol>
<li><p>建立一個attribute writer方法到project model裡面</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#project.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line">  has_many <span class="symbol">:givebacks</span></span><br><span class="line">  accepts_nested_attributes_for <span class="symbol">:givebacks</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用fields_for方法建立nested form（請注意：fields_for後面接的是符號）</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_form.html.erb</span></span><br><span class="line"></span><br><span class="line">&lt;%= form_for(project) <span class="keyword">do</span> <span class="params">|form|</span> %&gt;</span><br><span class="line">  &lt;div class=&quot;project-title&quot;&gt;</span><br><span class="line">    &lt;%= form.label <span class="symbol">:title</span>, <span class="string">&#x27;專案標題&#x27;</span> %&gt;</span><br><span class="line">    &lt;%= form.text_field <span class="symbol">:title%&gt;</span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">	</span></span><br><span class="line"><span class="regexp">	·········（略）···········</span></span><br><span class="line"><span class="regexp">	#下面是giveback的欄位</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;%= form.fields_for :givebacks do |givebacks_form| %&gt;</span></span><br><span class="line"><span class="regexp">      &lt;%= givebacks_form.label :回饋商品名稱 %&gt;</span></span><br><span class="line"><span class="regexp">      &lt;%= givebacks_form.text_field :title %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/div</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;%= givebacks_form.label <span class="symbol">:</span>價格 %&gt;</span><br><span class="line">      &lt;%= givebacks_form.text_field <span class="symbol">:price</span> %&gt; </span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;% end %&gt;</span></span><br><span class="line"><span class="regexp">  &lt;%= form.submit %&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>將giveback的資料加到permit</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#projects_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">project_params</span></span></span><br><span class="line">    params.<span class="keyword">require</span>(<span class="symbol">:project</span>).permit(<span class="symbol">:id</span>, <span class="symbol">:title</span>, <span class="symbol">:category</span>, <span class="symbol">:summary</span>, <span class="symbol">:content</span>, <span class="symbol">:pic</span>, <span class="symbol">:target_amount</span>, <span class="symbol">:user_id</span>, <span class="symbol">givebacks_attributes:</span> [<span class="symbol">:title</span>, <span class="symbol">:price</span>, <span class="symbol">:deliver_time</span>])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p> 註：id也要被permit過去，否則在update project資料時，giveback因為沒有id的關係，會被判斷成我們要create一個新的，一直製造新的giveback實體。</p>
</li>
<li><p>在project controller的new方法裡面建立givebacks的實體</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#projects_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    <span class="variable">@project</span> = Project.new</span><br><span class="line">    <span class="variable">@project</span>.givebacks.build</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>這時候填完資料按下送出，應該就可以看到兩個model的資料同時寫入資料庫了。</p>
<p>![](截圖 2020-12-28 下午10.54.25.png)</p>
<p>備註：在第四個步驟中，我們只能建立一個giveback的實體，如果需要要建立多個實體及資料，可使用times的方法。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    <span class="variable">@project</span> = Project.new</span><br><span class="line">    <span class="number">5</span>.times &#123;<span class="variable">@project</span>.givebacks.build&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="如何刪除fields-for的資料"><a href="#如何刪除fields-for的資料" class="headerlink" title="如何刪除fields_for的資料"></a>如何刪除fields_for的資料</h2><ol>
<li><p>在fields_for裡面設定刪除的checkbox選項</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;%= givebacks_form.check_box <span class="symbol">:_destroy</span> %&gt;</span><br><span class="line">  &lt;%= givebacks_form.label <span class="symbol">:_destroy</span>, <span class="string">&#x27;刪除回饋商品&#x27;</span> %&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在project的model裡面設定allow_destroy</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line">  has_many <span class="symbol">:givebacks</span></span><br><span class="line">  accepts_nested_attributes_for <span class="symbol">:givebacks</span>, <span class="symbol">allow_destroy:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>這只是目前我理出的概略步驟，其他詳細說明及用法可參考官方文件：</p>
<p><a href="https://guides.rubyonrails.org/form_helpers.html#building-complex-forms">https://guides.rubyonrails.org/form_helpers.html#building-complex-forms</a></p>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>挑戰連續刷題30天-day1</title>
    <url>/2020/12/30/%E6%8C%91%E6%88%B0%E9%80%A3%E7%BA%8C%E5%88%B7%E9%A1%8C30%E5%A4%A9-day1/</url>
    <content><![CDATA[<p>雖然今年沒能搭上鐵人賽的列車，但還是想給過去惰性滿滿的自己一些挑戰，從今天開始連續刷30天的codewar！！</p>
<h3 id="題目說明：取最大值與最小值"><a href="#題目說明：取最大值與最小值" class="headerlink" title="題目說明：取最大值與最小值"></a>題目說明：取最大值與最小值</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Test.assert_equals(high_and_low(<span class="string">&quot;4 5 29 54 4 0 -214 542 -64 1 -3 6 -6&quot;</span>), <span class="string">&quot;542 -214&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="起始內容："><a href="#起始內容：" class="headerlink" title="起始內容："></a>起始內容：</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>解題步驟：</p>
<p>1.把字串裡的每個字用split分開，並且得到新的陣列</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line"></span><br><span class="line">	numbers.split</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;[<span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;29&quot;</span>, <span class="string">&quot;54&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;-214&quot;</span>, <span class="string">&quot;542&quot;</span>, <span class="string">&quot;-64&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;-3&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;-6&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>2.用map對陣列每個元素做轉換成數字</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line"></span><br><span class="line">	numbers.split.map&#123;<span class="params">|x|</span> x.to_i&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;[<span class="number">4</span>, <span class="number">5</span>, <span class="number">29</span>, <span class="number">54</span>, <span class="number">4</span>, <span class="number">0</span>, -<span class="number">214</span>, <span class="number">542</span>, -<span class="number">64</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">6</span>, -<span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<p>3.用minmax取最小及最大值，再reverse把最大值放前面</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line"></span><br><span class="line">	numbers.split.map&#123;<span class="params">|x|</span> x.to_i&#125;.minmax.reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;[<span class="number">542</span>, -<span class="number">214</span>]</span><br></pre></td></tr></table></figure>

<p>4.最後join把陣列變回字串，並且在中間加上空格</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_and_low</span><span class="params">(numbers)</span></span></span><br><span class="line"></span><br><span class="line">	numbers.split.map&#123;<span class="params">|x|</span> x.to_i&#125;.minmax.reverse.join(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">=&gt;<span class="string">&quot;542 -214&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>Codewar</tag>
      </tags>
  </entry>
</search>
